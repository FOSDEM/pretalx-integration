# Generated by Django 5.1.3 on 2024-12-05 22:33

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("pretalx_auditlog", "0014_remove_submissionproxy_snapshot_insert_and_more"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="activitylogproxyevent",
            name="content_type",
        ),
        migrations.RemoveField(
            model_name="activitylogproxyevent",
            name="event",
        ),
        migrations.RemoveField(
            model_name="activitylogproxyevent",
            name="person",
        ),
        migrations.RemoveField(
            model_name="activitylogproxyevent",
            name="pgh_context",
        ),
        migrations.RemoveField(
            model_name="activitylogproxyevent",
            name="pgh_obj",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="activitylogproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="activitylogproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="activitylogproxy",
            name="beforedelete",
        ),
        migrations.DeleteModel(
            name="ActivityLogProxy",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answeroptionproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answeroptionproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answeroptionproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answerproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answerproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answerproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="availabilityproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="availabilityproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="availabilityproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="cfpproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="cfpproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="cfpproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="eventproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="eventproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="eventproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="feedbackproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="feedbackproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="feedbackproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="mailtemplateproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="mailtemplateproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="mailtemplateproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="organiserproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="organiserproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="organiserproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="questionproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="questionproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="questionproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="queuedmailproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="queuedmailproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="queuedmailproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="resourceproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="resourceproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="resourceproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewphaseproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewphaseproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewphaseproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewscorecategoryproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewscorecategoryproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewscorecategoryproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewscoreproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewscoreproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewscoreproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="roomproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="roomproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="roomproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="scheduleproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="scheduleproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="scheduleproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="speakerinformationproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="speakerinformationproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="speakerinformationproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="speakerprofileproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="speakerprofileproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="speakerprofileproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submissionproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submissionproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submissionproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submissiontypeproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submissiontypeproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submissiontypeproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submitteraccesscodeproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submitteraccesscodeproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="submitteraccesscodeproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="tagproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="tagproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="tagproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="talkslotproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="talkslotproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="talkslotproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="teaminviteproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="teaminviteproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="teaminviteproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="teamproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="teamproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="teamproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="trackproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="trackproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="trackproxy",
            name="beforedelete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="userproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="userproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="userproxy",
            name="beforedelete",
        ),
        migrations.RemoveField(
            model_name="submissionproxyevent",
            name="updated",
        ),
        migrations.RemoveField(
            model_name="trackproxyevent",
            name="updated",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answeroptionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answeroptionproxyevent" ("answer", "created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question_id", "updated") VALUES (NEW."answer", NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."position", NEW."question_id", NEW."updated"); RETURN NULL;',
                    hash="ab0000d97228293102b5f2ce143efeed16175c63",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_6c265",
                    table="submission_answeroption",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answeroptionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_answeroptionproxyevent" ("answer", "created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question_id", "updated") VALUES (NEW."answer", NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."position", NEW."question_id", NEW."updated"); RETURN NULL;',
                    hash="1fd825f89148b22b150a8ad02981183c8a2a0c3a",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_ee499",
                    table="submission_answeroption",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answeroptionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answeroptionproxyevent" ("answer", "created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question_id", "updated") VALUES (OLD."answer", OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."position", OLD."question_id", OLD."updated"); RETURN NULL;',
                    hash="0f99a979e7f89031c6c40c44ae6d919b07a77a64",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_4ce03",
                    table="submission_answeroption",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id") VALUES (NEW."answer", NEW."answer_file", NEW."created", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."question_id", NEW."review_id", NEW."submission_id"); RETURN NULL;',
                    hash="a510de767c02ccfdf0788ada878cefe69ce4ef8a",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_20aa9",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."answer" IS DISTINCT FROM (NEW."answer") OR OLD."answer_file" IS DISTINCT FROM (NEW."answer_file") OR OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."person_id" IS DISTINCT FROM (NEW."person_id") OR OLD."question_id" IS DISTINCT FROM (NEW."question_id") OR OLD."review_id" IS DISTINCT FROM (NEW."review_id") OR OLD."submission_id" IS DISTINCT FROM (NEW."submission_id"))',
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id") VALUES (NEW."answer", NEW."answer_file", NEW."created", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."question_id", NEW."review_id", NEW."submission_id"); RETURN NULL;',
                    hash="b87075a53aee5ac3b903fe3092ebe2fb5bc7098a",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_3cb43",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id") VALUES (OLD."answer", OLD."answer_file", OLD."created", OLD."id", OLD."person_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."question_id", OLD."review_id", OLD."submission_id"); RETURN NULL;',
                    hash="951ebb0d20d3b906216597687164468404211765",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_d32ed",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="availabilityproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_availabilityproxyevent" ("created", "end", "event_id", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "start", "updated") VALUES (NEW."created", NEW."end", NEW."event_id", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."room_id", NEW."start", NEW."updated"); RETURN NULL;',
                    hash="e52972b31c73c37936b57c2d59662743dcbd9395",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_f0755",
                    table="schedule_availability",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="availabilityproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_availabilityproxyevent" ("created", "end", "event_id", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "start", "updated") VALUES (NEW."created", NEW."end", NEW."event_id", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."room_id", NEW."start", NEW."updated"); RETURN NULL;',
                    hash="7b6e64459ea68e432c5326429cbb07980a377c6d",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_cc337",
                    table="schedule_availability",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="availabilityproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_availabilityproxyevent" ("created", "end", "event_id", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "start", "updated") VALUES (OLD."created", OLD."end", OLD."event_id", OLD."id", OLD."person_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."room_id", OLD."start", OLD."updated"); RETURN NULL;',
                    hash="9a3b4e99f38ae6e58f361c4d36b953640f032eea",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_c47ce",
                    table="schedule_availability",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="cfpproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_cfpproxyevent" ("created", "deadline", "default_type_id", "event_id", "fields", "headline", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "settings", "text", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_type_id", NEW."event_id", NEW."fields", NEW."headline", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."settings", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="1b47994bc3db35f12dd6aa455718d44e64983d36",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_5ed6e",
                    table="submission_cfp",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="cfpproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_cfpproxyevent" ("created", "deadline", "default_type_id", "event_id", "fields", "headline", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "settings", "text", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_type_id", NEW."event_id", NEW."fields", NEW."headline", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."settings", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="f0bae0e005db7b3f9e1a4c9f91cae1fbe0d7f467",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_7cf16",
                    table="submission_cfp",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="cfpproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_cfpproxyevent" ("created", "deadline", "default_type_id", "event_id", "fields", "headline", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "settings", "text", "updated") VALUES (OLD."created", OLD."deadline", OLD."default_type_id", OLD."event_id", OLD."fields", OLD."headline", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."settings", OLD."text", OLD."updated"); RETURN NULL;',
                    hash="c09c88b02a7edbb1ccbc89e6077fcc4c98d7f253",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_ce951",
                    table="submission_cfp",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_eventproxyevent" ("accept_template_id", "ack_template_id", "content_locale_array", "created", "custom_css", "custom_domain", "date_from", "date_to", "display_settings", "email", "feature_flags", "featured_sessions_text", "header_image", "id", "is_public", "landing_page_text", "locale", "locale_array", "logo", "mail_settings", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plugins", "primary_color", "question_template_id", "reject_template_id", "review_settings", "slug", "timezone", "update_template_id") VALUES (NEW."accept_template_id", NEW."ack_template_id", NEW."content_locale_array", NEW."created", NEW."custom_css", NEW."custom_domain", NEW."date_from", NEW."date_to", NEW."display_settings", NEW."email", NEW."feature_flags", NEW."featured_sessions_text", NEW."header_image", NEW."id", NEW."is_public", NEW."landing_page_text", NEW."locale", NEW."locale_array", NEW."logo", NEW."mail_settings", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."plugins", NEW."primary_color", NEW."question_template_id", NEW."reject_template_id", NEW."review_settings", NEW."slug", NEW."timezone", NEW."update_template_id"); RETURN NULL;',
                    hash="90943fc52605ab61468905bb485d646bf17a2708",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_932e5",
                    table="event_event",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."accept_template_id" IS DISTINCT FROM (NEW."accept_template_id") OR OLD."ack_template_id" IS DISTINCT FROM (NEW."ack_template_id") OR OLD."content_locale_array" IS DISTINCT FROM (NEW."content_locale_array") OR OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."custom_css" IS DISTINCT FROM (NEW."custom_css") OR OLD."custom_domain" IS DISTINCT FROM (NEW."custom_domain") OR OLD."date_from" IS DISTINCT FROM (NEW."date_from") OR OLD."date_to" IS DISTINCT FROM (NEW."date_to") OR OLD."display_settings" IS DISTINCT FROM (NEW."display_settings") OR OLD."email" IS DISTINCT FROM (NEW."email") OR OLD."feature_flags" IS DISTINCT FROM (NEW."feature_flags") OR OLD."featured_sessions_text" IS DISTINCT FROM (NEW."featured_sessions_text") OR OLD."header_image" IS DISTINCT FROM (NEW."header_image") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."is_public" IS DISTINCT FROM (NEW."is_public") OR OLD."landing_page_text" IS DISTINCT FROM (NEW."landing_page_text") OR OLD."locale" IS DISTINCT FROM (NEW."locale") OR OLD."locale_array" IS DISTINCT FROM (NEW."locale_array") OR OLD."logo" IS DISTINCT FROM (NEW."logo") OR OLD."mail_settings" IS DISTINCT FROM (NEW."mail_settings") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."organiser_id" IS DISTINCT FROM (NEW."organiser_id") OR OLD."plugins" IS DISTINCT FROM (NEW."plugins") OR OLD."primary_color" IS DISTINCT FROM (NEW."primary_color") OR OLD."question_template_id" IS DISTINCT FROM (NEW."question_template_id") OR OLD."reject_template_id" IS DISTINCT FROM (NEW."reject_template_id") OR OLD."review_settings" IS DISTINCT FROM (NEW."review_settings") OR OLD."slug" IS DISTINCT FROM (NEW."slug") OR OLD."timezone" IS DISTINCT FROM (NEW."timezone") OR OLD."update_template_id" IS DISTINCT FROM (NEW."update_template_id"))',
                    func='INSERT INTO "pretalx_auditlog_eventproxyevent" ("accept_template_id", "ack_template_id", "content_locale_array", "created", "custom_css", "custom_domain", "date_from", "date_to", "display_settings", "email", "feature_flags", "featured_sessions_text", "header_image", "id", "is_public", "landing_page_text", "locale", "locale_array", "logo", "mail_settings", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plugins", "primary_color", "question_template_id", "reject_template_id", "review_settings", "slug", "timezone", "update_template_id") VALUES (NEW."accept_template_id", NEW."ack_template_id", NEW."content_locale_array", NEW."created", NEW."custom_css", NEW."custom_domain", NEW."date_from", NEW."date_to", NEW."display_settings", NEW."email", NEW."feature_flags", NEW."featured_sessions_text", NEW."header_image", NEW."id", NEW."is_public", NEW."landing_page_text", NEW."locale", NEW."locale_array", NEW."logo", NEW."mail_settings", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."plugins", NEW."primary_color", NEW."question_template_id", NEW."reject_template_id", NEW."review_settings", NEW."slug", NEW."timezone", NEW."update_template_id"); RETURN NULL;',
                    hash="cb7a344028f9d259f393e19d38b4460924f12859",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_cbff6",
                    table="event_event",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_eventproxyevent" ("accept_template_id", "ack_template_id", "content_locale_array", "created", "custom_css", "custom_domain", "date_from", "date_to", "display_settings", "email", "feature_flags", "featured_sessions_text", "header_image", "id", "is_public", "landing_page_text", "locale", "locale_array", "logo", "mail_settings", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plugins", "primary_color", "question_template_id", "reject_template_id", "review_settings", "slug", "timezone", "update_template_id") VALUES (OLD."accept_template_id", OLD."ack_template_id", OLD."content_locale_array", OLD."created", OLD."custom_css", OLD."custom_domain", OLD."date_from", OLD."date_to", OLD."display_settings", OLD."email", OLD."feature_flags", OLD."featured_sessions_text", OLD."header_image", OLD."id", OLD."is_public", OLD."landing_page_text", OLD."locale", OLD."locale_array", OLD."logo", OLD."mail_settings", OLD."name", OLD."organiser_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."plugins", OLD."primary_color", OLD."question_template_id", OLD."reject_template_id", OLD."review_settings", OLD."slug", OLD."timezone", OLD."update_template_id"); RETURN NULL;',
                    hash="fd96f16b1e7515cf21babde1112f891263b0b4a9",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_da614",
                    table="event_event",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="feedbackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_feedbackproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "review", "speaker_id", "talk_id", "updated") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."rating", NEW."review", NEW."speaker_id", NEW."talk_id", NEW."updated"); RETURN NULL;',
                    hash="bf7cd7fe7dd6c612a63391a2fb7b93ac1989a434",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_47a56",
                    table="submission_feedback",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="feedbackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_feedbackproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "review", "speaker_id", "talk_id", "updated") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."rating", NEW."review", NEW."speaker_id", NEW."talk_id", NEW."updated"); RETURN NULL;',
                    hash="631ae04c3429cb05c4d9f5c00eb11e04b988cfad",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_d1bba",
                    table="submission_feedback",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="feedbackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_feedbackproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "review", "speaker_id", "talk_id", "updated") VALUES (OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."rating", OLD."review", OLD."speaker_id", OLD."talk_id", OLD."updated"); RETURN NULL;',
                    hash="4d16ea6903a8c3339940f12a2519f4b45bd476b2",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_09fe2",
                    table="submission_feedback",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mailtemplateproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_mailtemplateproxyevent" ("bcc", "cc", "created", "event_id", "id", "is_auto_created", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "subject", "text", "updated") VALUES (NEW."bcc", NEW."cc", NEW."created", NEW."event_id", NEW."id", NEW."is_auto_created", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."reply_to", NEW."subject", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="0aaeae603f8647f418fcfcca4b363d2fd8cff717",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_7ccdb",
                    table="mail_mailtemplate",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mailtemplateproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_mailtemplateproxyevent" ("bcc", "cc", "created", "event_id", "id", "is_auto_created", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "subject", "text", "updated") VALUES (NEW."bcc", NEW."cc", NEW."created", NEW."event_id", NEW."id", NEW."is_auto_created", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."reply_to", NEW."subject", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="100d64cdd5c6362e0854b21aefe7841c20896b9d",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_9c223",
                    table="mail_mailtemplate",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mailtemplateproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_mailtemplateproxyevent" ("bcc", "cc", "created", "event_id", "id", "is_auto_created", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "subject", "text", "updated") VALUES (OLD."bcc", OLD."cc", OLD."created", OLD."event_id", OLD."id", OLD."is_auto_created", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."reply_to", OLD."subject", OLD."text", OLD."updated"); RETURN NULL;',
                    hash="39f2854af16049d8a18177989e321a2919ab146c",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_a05db",
                    table="mail_mailtemplate",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="organiserproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_organiserproxyevent" ("created", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated") VALUES (NEW."created", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."slug", NEW."updated"); RETURN NULL;',
                    hash="75971e43e3007c60ce3ad2261347c83ad8768e06",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_e6f3d",
                    table="event_organiser",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="organiserproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_organiserproxyevent" ("created", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated") VALUES (NEW."created", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."slug", NEW."updated"); RETURN NULL;',
                    hash="f8699119e794a0cde65641184d8fc5eb3a0ecade",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_3bfa3",
                    table="event_organiser",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="organiserproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_organiserproxyevent" ("created", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated") VALUES (OLD."created", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."slug", OLD."updated"); RETURN NULL;',
                    hash="94dbb96ee16a5f9fe73efb10e47e5450c97ad01d",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_5807c",
                    table="event_organiser",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="questionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_questionproxyevent" ("active", "contains_personal_data", "created", "deadline", "default_answer", "event_id", "freeze_after", "help_text", "id", "is_public", "is_visible_to_reviewers", "max_date", "max_datetime", "max_length", "max_number", "min_date", "min_datetime", "min_length", "min_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question", "question_required", "target", "updated", "variant") VALUES (NEW."active", NEW."contains_personal_data", NEW."created", NEW."deadline", NEW."default_answer", NEW."event_id", NEW."freeze_after", NEW."help_text", NEW."id", NEW."is_public", NEW."is_visible_to_reviewers", NEW."max_date", NEW."max_datetime", NEW."max_length", NEW."max_number", NEW."min_date", NEW."min_datetime", NEW."min_length", NEW."min_number", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."position", NEW."question", NEW."question_required", NEW."target", NEW."updated", NEW."variant"); RETURN NULL;',
                    hash="7f0ba4176cf5927ec126388a07d92ce0186b2c1e",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_cb3b2",
                    table="submission_question",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="questionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_questionproxyevent" ("active", "contains_personal_data", "created", "deadline", "default_answer", "event_id", "freeze_after", "help_text", "id", "is_public", "is_visible_to_reviewers", "max_date", "max_datetime", "max_length", "max_number", "min_date", "min_datetime", "min_length", "min_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question", "question_required", "target", "updated", "variant") VALUES (NEW."active", NEW."contains_personal_data", NEW."created", NEW."deadline", NEW."default_answer", NEW."event_id", NEW."freeze_after", NEW."help_text", NEW."id", NEW."is_public", NEW."is_visible_to_reviewers", NEW."max_date", NEW."max_datetime", NEW."max_length", NEW."max_number", NEW."min_date", NEW."min_datetime", NEW."min_length", NEW."min_number", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."position", NEW."question", NEW."question_required", NEW."target", NEW."updated", NEW."variant"); RETURN NULL;',
                    hash="0e0aed735e3f21310fe274ad8e15c584bafad6ad",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_09d4b",
                    table="submission_question",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="questionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_questionproxyevent" ("active", "contains_personal_data", "created", "deadline", "default_answer", "event_id", "freeze_after", "help_text", "id", "is_public", "is_visible_to_reviewers", "max_date", "max_datetime", "max_length", "max_number", "min_date", "min_datetime", "min_length", "min_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question", "question_required", "target", "updated", "variant") VALUES (OLD."active", OLD."contains_personal_data", OLD."created", OLD."deadline", OLD."default_answer", OLD."event_id", OLD."freeze_after", OLD."help_text", OLD."id", OLD."is_public", OLD."is_visible_to_reviewers", OLD."max_date", OLD."max_datetime", OLD."max_length", OLD."max_number", OLD."min_date", OLD."min_datetime", OLD."min_length", OLD."min_number", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."position", OLD."question", OLD."question_required", OLD."target", OLD."updated", OLD."variant"); RETURN NULL;',
                    hash="2486a114185ceaad25cfa42f011061fd0aa815b3",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_f7c85",
                    table="submission_question",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queuedmailproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_queuedmailproxyevent" ("attachments", "bcc", "cc", "created", "event_id", "id", "locale", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "sent", "subject", "template_id", "text", "to", "updated") VALUES (NEW."attachments", NEW."bcc", NEW."cc", NEW."created", NEW."event_id", NEW."id", NEW."locale", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."reply_to", NEW."sent", NEW."subject", NEW."template_id", NEW."text", NEW."to", NEW."updated"); RETURN NULL;',
                    hash="cf63cb5c55317d2962b171058761ed48f919f0fa",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_fed03",
                    table="mail_queuedmail",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queuedmailproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_queuedmailproxyevent" ("attachments", "bcc", "cc", "created", "event_id", "id", "locale", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "sent", "subject", "template_id", "text", "to", "updated") VALUES (NEW."attachments", NEW."bcc", NEW."cc", NEW."created", NEW."event_id", NEW."id", NEW."locale", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."reply_to", NEW."sent", NEW."subject", NEW."template_id", NEW."text", NEW."to", NEW."updated"); RETURN NULL;',
                    hash="43a2853f53bbc091ac20997aab746d57f8b832e7",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_18680",
                    table="mail_queuedmail",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queuedmailproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_queuedmailproxyevent" ("attachments", "bcc", "cc", "created", "event_id", "id", "locale", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "sent", "subject", "template_id", "text", "to", "updated") VALUES (OLD."attachments", OLD."bcc", OLD."cc", OLD."created", OLD."event_id", OLD."id", OLD."locale", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."reply_to", OLD."sent", OLD."subject", OLD."template_id", OLD."text", OLD."to", OLD."updated"); RETURN NULL;',
                    hash="a50ef0db76e9c1919d12bac33e7ec07b3f42b4f5",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_02bf5",
                    table="mail_queuedmail",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="resourceproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_resourceproxyevent" ("created", "description", "id", "link", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."id", NEW."link", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."resource", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="1a6a6405e23dd1ee44c8198eb2ce936a6fb5ca8e",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_f9ac7",
                    table="submission_resource",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="resourceproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_resourceproxyevent" ("created", "description", "id", "link", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."id", NEW."link", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."resource", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="e1deb4bb72e910fec3e204e82cde1bf472ec8d56",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_8894c",
                    table="submission_resource",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="resourceproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_resourceproxyevent" ("created", "description", "id", "link", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "submission_id", "updated") VALUES (OLD."created", OLD."description", OLD."id", OLD."link", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."resource", OLD."submission_id", OLD."updated"); RETURN NULL;',
                    hash="ca4e7739f4444850490dff1c9299eaa332c204c8",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_9f1d3",
                    table="submission_resource",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewphaseproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewphaseproxyevent" ("can_change_submission_state", "can_review", "can_see_other_reviews", "can_see_reviewer_names", "can_see_speaker_names", "can_tag_submissions", "created", "end", "event_id", "id", "is_active", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "proposal_visibility", "speakers_can_change_submissions", "start", "updated") VALUES (NEW."can_change_submission_state", NEW."can_review", NEW."can_see_other_reviews", NEW."can_see_reviewer_names", NEW."can_see_speaker_names", NEW."can_tag_submissions", NEW."created", NEW."end", NEW."event_id", NEW."id", NEW."is_active", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."position", NEW."proposal_visibility", NEW."speakers_can_change_submissions", NEW."start", NEW."updated"); RETURN NULL;',
                    hash="c101abc78e4b5a8623c448dad65b5d4b349be01f",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_c17bd",
                    table="submission_reviewphase",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewphaseproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewphaseproxyevent" ("can_change_submission_state", "can_review", "can_see_other_reviews", "can_see_reviewer_names", "can_see_speaker_names", "can_tag_submissions", "created", "end", "event_id", "id", "is_active", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "proposal_visibility", "speakers_can_change_submissions", "start", "updated") VALUES (NEW."can_change_submission_state", NEW."can_review", NEW."can_see_other_reviews", NEW."can_see_reviewer_names", NEW."can_see_speaker_names", NEW."can_tag_submissions", NEW."created", NEW."end", NEW."event_id", NEW."id", NEW."is_active", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."position", NEW."proposal_visibility", NEW."speakers_can_change_submissions", NEW."start", NEW."updated"); RETURN NULL;',
                    hash="1b86f726b8cfec08c31ad19c140fba74afd2d7ea",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_0ee27",
                    table="submission_reviewphase",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewphaseproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewphaseproxyevent" ("can_change_submission_state", "can_review", "can_see_other_reviews", "can_see_reviewer_names", "can_see_speaker_names", "can_tag_submissions", "created", "end", "event_id", "id", "is_active", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "proposal_visibility", "speakers_can_change_submissions", "start", "updated") VALUES (OLD."can_change_submission_state", OLD."can_review", OLD."can_see_other_reviews", OLD."can_see_reviewer_names", OLD."can_see_speaker_names", OLD."can_tag_submissions", OLD."created", OLD."end", OLD."event_id", OLD."id", OLD."is_active", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."position", OLD."proposal_visibility", OLD."speakers_can_change_submissions", OLD."start", OLD."updated"); RETURN NULL;',
                    hash="623ea25558c35e09b79e46be2fe865e821b574b9",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_f2bb1",
                    table="submission_reviewphase",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "user_id") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."score", NEW."submission_id", NEW."text", NEW."user_id"); RETURN NULL;',
                    hash="e353ec2b021c71ca400bc2bf4e30c6083e2db3ea",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_72a4e",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."score" IS DISTINCT FROM (NEW."score") OR OLD."submission_id" IS DISTINCT FROM (NEW."submission_id") OR OLD."text" IS DISTINCT FROM (NEW."text") OR OLD."user_id" IS DISTINCT FROM (NEW."user_id"))',
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "user_id") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."score", NEW."submission_id", NEW."text", NEW."user_id"); RETURN NULL;',
                    hash="e1f8aa0df347f1cc933bbb049d38a1966cd25fee",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_e9105",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "user_id") VALUES (OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."score", OLD."submission_id", OLD."text", OLD."user_id"); RETURN NULL;',
                    hash="80907b96c9e2f53645c484b976ae1c416f4be73d",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_c72b4",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscorecategoryproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscorecategoryproxyevent" ("active", "created", "event_id", "id", "is_independent", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "required", "updated", "weight") VALUES (NEW."active", NEW."created", NEW."event_id", NEW."id", NEW."is_independent", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."required", NEW."updated", NEW."weight"); RETURN NULL;',
                    hash="5d41bbd60b83fad04e562f8d23798c2df9177af7",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_697bc",
                    table="submission_reviewscorecategory",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscorecategoryproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewscorecategoryproxyevent" ("active", "created", "event_id", "id", "is_independent", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "required", "updated", "weight") VALUES (NEW."active", NEW."created", NEW."event_id", NEW."id", NEW."is_independent", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."required", NEW."updated", NEW."weight"); RETURN NULL;',
                    hash="18c2d058bb7dc263786926bd3c321ac1531bf717",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_0af03",
                    table="submission_reviewscorecategory",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscorecategoryproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscorecategoryproxyevent" ("active", "created", "event_id", "id", "is_independent", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "required", "updated", "weight") VALUES (OLD."active", OLD."created", OLD."event_id", OLD."id", OLD."is_independent", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."required", OLD."updated", OLD."weight"); RETURN NULL;',
                    hash="c89e1bcdf1ea653c3c7e4298c5f75a619d12b2a6",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_65a2d",
                    table="submission_reviewscorecategory",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscoreproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscoreproxyevent" ("category_id", "created", "id", "label", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "value") VALUES (NEW."category_id", NEW."created", NEW."id", NEW."label", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."updated", NEW."value"); RETURN NULL;',
                    hash="3610ba76810cf52e17e389daf7f71bbc7cc1f2b5",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_48317",
                    table="submission_reviewscore",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscoreproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewscoreproxyevent" ("category_id", "created", "id", "label", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "value") VALUES (NEW."category_id", NEW."created", NEW."id", NEW."label", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."updated", NEW."value"); RETURN NULL;',
                    hash="a751af5fd45b230449abcb6079846e1d7ea0d2fb",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_b2004",
                    table="submission_reviewscore",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscoreproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscoreproxyevent" ("category_id", "created", "id", "label", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "value") VALUES (OLD."category_id", OLD."created", OLD."id", OLD."label", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."updated", OLD."value"); RETURN NULL;',
                    hash="ec662d39962a97fe651bd2ff2989f6e6b4eeae5d",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_5be65",
                    table="submission_reviewscore",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="roomproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_roomproxyevent" ("capacity", "created", "description", "event_id", "guid", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "speaker_info", "updated") VALUES (NEW."capacity", NEW."created", NEW."description", NEW."event_id", NEW."guid", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."position", NEW."speaker_info", NEW."updated"); RETURN NULL;',
                    hash="a38773fc852775d628de45c182a51623ce6eb3db",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_52f9d",
                    table="schedule_room",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="roomproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_roomproxyevent" ("capacity", "created", "description", "event_id", "guid", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "speaker_info", "updated") VALUES (NEW."capacity", NEW."created", NEW."description", NEW."event_id", NEW."guid", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."position", NEW."speaker_info", NEW."updated"); RETURN NULL;',
                    hash="efaf4b8ff1074e2c5d0ec5eadbac8460eb8e3224",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_1ea72",
                    table="schedule_room",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="roomproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_roomproxyevent" ("capacity", "created", "description", "event_id", "guid", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "speaker_info", "updated") VALUES (OLD."capacity", OLD."created", OLD."description", OLD."event_id", OLD."guid", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."position", OLD."speaker_info", OLD."updated"); RETURN NULL;',
                    hash="47f9af4e2280b914dd1237d13136fe8a7a3a998d",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_01fef",
                    table="schedule_room",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="scheduleproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_scheduleproxyevent" ("comment", "created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "updated", "version") VALUES (NEW."comment", NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."published", NEW."updated", NEW."version"); RETURN NULL;',
                    hash="07e5481792bbe0eb0646f41f422b3ae71ac644ab",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_31eba",
                    table="schedule_schedule",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="scheduleproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_scheduleproxyevent" ("comment", "created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "updated", "version") VALUES (NEW."comment", NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."published", NEW."updated", NEW."version"); RETURN NULL;',
                    hash="65b799cb61e2bf31ac5906aab28892668af2373e",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_737ef",
                    table="schedule_schedule",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="scheduleproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_scheduleproxyevent" ("comment", "created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "updated", "version") VALUES (OLD."comment", OLD."created", OLD."event_id", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."published", OLD."updated", OLD."version"); RETURN NULL;',
                    hash="70b9e01190eb2ae8ac8d078934ef8ae32920873a",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_09d79",
                    table="schedule_schedule",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerinformationproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerinformationproxyevent" ("created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "target_group", "text", "title", "updated") VALUES (NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."resource", NEW."target_group", NEW."text", NEW."title", NEW."updated"); RETURN NULL;',
                    hash="546518b7f3a77f92d224852506df12e14ce2fe85",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_32607",
                    table="person_speakerinformation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerinformationproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_speakerinformationproxyevent" ("created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "target_group", "text", "title", "updated") VALUES (NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."resource", NEW."target_group", NEW."text", NEW."title", NEW."updated"); RETURN NULL;',
                    hash="c6ef82de7153db3f01605c95f01ebf0b45e96d11",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_ec80e",
                    table="person_speakerinformation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerinformationproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerinformationproxyevent" ("created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "target_group", "text", "title", "updated") VALUES (OLD."created", OLD."event_id", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."resource", OLD."target_group", OLD."text", OLD."title", OLD."updated"); RETURN NULL;',
                    hash="d96cce7e57c778f5d5a9cf897a8b384613fa9181",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_d5108",
                    table="person_speakerinformation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerprofileproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerprofileproxyevent" ("biography", "created", "event_id", "has_arrived", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "user_id") VALUES (NEW."biography", NEW."created", NEW."event_id", NEW."has_arrived", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."updated", NEW."user_id"); RETURN NULL;',
                    hash="5fd937c4af3e65186c3eca5aae17661c2dd4df67",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_0f6a2",
                    table="person_speakerprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerprofileproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_speakerprofileproxyevent" ("biography", "created", "event_id", "has_arrived", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "user_id") VALUES (NEW."biography", NEW."created", NEW."event_id", NEW."has_arrived", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."updated", NEW."user_id"); RETURN NULL;',
                    hash="5eb126fcd85edebbf0976535647fda05a0109789",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_014e7",
                    table="person_speakerprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerprofileproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerprofileproxyevent" ("biography", "created", "event_id", "has_arrived", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "user_id") VALUES (OLD."biography", OLD."created", OLD."event_id", OLD."has_arrived", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."updated", OLD."user_id"); RETURN NULL;',
                    hash="99bd48eab132047dbb857dc10fac9eb02a642d74",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_e5b48",
                    table="person_speakerprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissionproxyevent" ("abstract", "access_code_id", "anonymised_data", "code", "content_locale", "created", "description", "do_not_record", "duration", "event_id", "id", "image", "internal_notes", "is_featured", "notes", "on_website", "pending_state", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "review_code", "slot_count", "state", "submission_type_id", "title", "track_id") VALUES (NEW."abstract", NEW."access_code_id", NEW."anonymised_data", NEW."code", NEW."content_locale", NEW."created", NEW."description", NEW."do_not_record", NEW."duration", NEW."event_id", NEW."id", NEW."image", NEW."internal_notes", NEW."is_featured", NEW."notes", NEW."on_website", NEW."pending_state", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."review_code", NEW."slot_count", NEW."state", NEW."submission_type_id", NEW."title", NEW."track_id"); RETURN NULL;',
                    hash="c2c8142f5e1bc6fe5e27b4ce581d4b2d51fbd7fd",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_c03d8",
                    table="submission_submission",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."abstract" IS DISTINCT FROM (NEW."abstract") OR OLD."access_code_id" IS DISTINCT FROM (NEW."access_code_id") OR OLD."anonymised_data" IS DISTINCT FROM (NEW."anonymised_data") OR OLD."code" IS DISTINCT FROM (NEW."code") OR OLD."content_locale" IS DISTINCT FROM (NEW."content_locale") OR OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."do_not_record" IS DISTINCT FROM (NEW."do_not_record") OR OLD."duration" IS DISTINCT FROM (NEW."duration") OR OLD."event_id" IS DISTINCT FROM (NEW."event_id") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."image" IS DISTINCT FROM (NEW."image") OR OLD."internal_notes" IS DISTINCT FROM (NEW."internal_notes") OR OLD."is_featured" IS DISTINCT FROM (NEW."is_featured") OR OLD."notes" IS DISTINCT FROM (NEW."notes") OR OLD."on_website" IS DISTINCT FROM (NEW."on_website") OR OLD."pending_state" IS DISTINCT FROM (NEW."pending_state") OR OLD."review_code" IS DISTINCT FROM (NEW."review_code") OR OLD."slot_count" IS DISTINCT FROM (NEW."slot_count") OR OLD."state" IS DISTINCT FROM (NEW."state") OR OLD."submission_type_id" IS DISTINCT FROM (NEW."submission_type_id") OR OLD."title" IS DISTINCT FROM (NEW."title") OR OLD."track_id" IS DISTINCT FROM (NEW."track_id"))',
                    func='INSERT INTO "pretalx_auditlog_submissionproxyevent" ("abstract", "access_code_id", "anonymised_data", "code", "content_locale", "created", "description", "do_not_record", "duration", "event_id", "id", "image", "internal_notes", "is_featured", "notes", "on_website", "pending_state", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "review_code", "slot_count", "state", "submission_type_id", "title", "track_id") VALUES (NEW."abstract", NEW."access_code_id", NEW."anonymised_data", NEW."code", NEW."content_locale", NEW."created", NEW."description", NEW."do_not_record", NEW."duration", NEW."event_id", NEW."id", NEW."image", NEW."internal_notes", NEW."is_featured", NEW."notes", NEW."on_website", NEW."pending_state", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."review_code", NEW."slot_count", NEW."state", NEW."submission_type_id", NEW."title", NEW."track_id"); RETURN NULL;',
                    hash="911e1a648e7c069e85ad160a51795e8ab91b2186",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_0bc27",
                    table="submission_submission",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissionproxyevent" ("abstract", "access_code_id", "anonymised_data", "code", "content_locale", "created", "description", "do_not_record", "duration", "event_id", "id", "image", "internal_notes", "is_featured", "notes", "on_website", "pending_state", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "review_code", "slot_count", "state", "submission_type_id", "title", "track_id") VALUES (OLD."abstract", OLD."access_code_id", OLD."anonymised_data", OLD."code", OLD."content_locale", OLD."created", OLD."description", OLD."do_not_record", OLD."duration", OLD."event_id", OLD."id", OLD."image", OLD."internal_notes", OLD."is_featured", OLD."notes", OLD."on_website", OLD."pending_state", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."review_code", OLD."slot_count", OLD."state", OLD."submission_type_id", OLD."title", OLD."track_id"); RETURN NULL;',
                    hash="227c323e6c7a823e9e0e268f00252e7b4134f2b9",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_4b93d",
                    table="submission_submission",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissiontypeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissiontypeproxyevent" ("created", "deadline", "default_duration", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "requires_access_code", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_duration", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."requires_access_code", NEW."updated"); RETURN NULL;',
                    hash="c60ac38fb63f44ea1ecea6dc878ebcf01acf0a52",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_8522a",
                    table="submission_submissiontype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissiontypeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_submissiontypeproxyevent" ("created", "deadline", "default_duration", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "requires_access_code", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_duration", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."requires_access_code", NEW."updated"); RETURN NULL;',
                    hash="bb579029b7bb127f472d410b963a5f5d66c5c7a6",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_c0d20",
                    table="submission_submissiontype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissiontypeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissiontypeproxyevent" ("created", "deadline", "default_duration", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "requires_access_code", "updated") VALUES (OLD."created", OLD."deadline", OLD."default_duration", OLD."event_id", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."requires_access_code", OLD."updated"); RETURN NULL;',
                    hash="6c14437658cbb89956705a1f4058b95d25bf96d0",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_5d25d",
                    table="submission_submissiontype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submitteraccesscodeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submitteraccesscodeproxyevent" ("code", "created", "event_id", "id", "maximum_uses", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redeemed", "submission_type_id", "track_id", "updated", "valid_until") VALUES (NEW."code", NEW."created", NEW."event_id", NEW."id", NEW."maximum_uses", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."redeemed", NEW."submission_type_id", NEW."track_id", NEW."updated", NEW."valid_until"); RETURN NULL;',
                    hash="b21658f6e40ea1d5cc4964055b5f91d0fc778f04",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_c1fea",
                    table="submission_submitteraccesscode",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submitteraccesscodeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_submitteraccesscodeproxyevent" ("code", "created", "event_id", "id", "maximum_uses", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redeemed", "submission_type_id", "track_id", "updated", "valid_until") VALUES (NEW."code", NEW."created", NEW."event_id", NEW."id", NEW."maximum_uses", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."redeemed", NEW."submission_type_id", NEW."track_id", NEW."updated", NEW."valid_until"); RETURN NULL;',
                    hash="cb53482746847a016ca1c61e90dda84c08116344",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_7e153",
                    table="submission_submitteraccesscode",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submitteraccesscodeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submitteraccesscodeproxyevent" ("code", "created", "event_id", "id", "maximum_uses", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redeemed", "submission_type_id", "track_id", "updated", "valid_until") VALUES (OLD."code", OLD."created", OLD."event_id", OLD."id", OLD."maximum_uses", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."redeemed", OLD."submission_type_id", OLD."track_id", OLD."updated", OLD."valid_until"); RETURN NULL;',
                    hash="d4628fa4dee14fe8916776ef34484966ab8c926e",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_14b3f",
                    table="submission_submitteraccesscode",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tagproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_tagproxyevent" ("color", "created", "description", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "public", "tag", "updated") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."public", NEW."tag", NEW."updated"); RETURN NULL;',
                    hash="ec64ca43b424618a9bda6fb02da884674631dd06",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_70e00",
                    table="submission_tag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tagproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_tagproxyevent" ("color", "created", "description", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "public", "tag", "updated") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."public", NEW."tag", NEW."updated"); RETURN NULL;',
                    hash="6ba6a4de4f14e2324707732f4a6d703d36ab2728",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_73576",
                    table="submission_tag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tagproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_tagproxyevent" ("color", "created", "description", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "public", "tag", "updated") VALUES (OLD."color", OLD."created", OLD."description", OLD."event_id", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."public", OLD."tag", OLD."updated"); RETURN NULL;',
                    hash="4bebda41ac558be1200fa3f796741674c2a3d7d4",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_6de5d",
                    table="submission_tag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "is_visible", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."end", NEW."id", NEW."is_visible", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."room_id", NEW."schedule_id", NEW."start", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="38fc83d90a466e52ced79f34d265f3a093747e8a",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_1dfbd",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "is_visible", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."end", NEW."id", NEW."is_visible", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."room_id", NEW."schedule_id", NEW."start", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="dd172150040595519fe5cbb6404fb3370099f715",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_d2c2d",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "is_visible", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (OLD."created", OLD."description", OLD."end", OLD."id", OLD."is_visible", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."room_id", OLD."schedule_id", OLD."start", OLD."submission_id", OLD."updated"); RETURN NULL;',
                    hash="5c809ff7f603f49236d2a3889de0686a95c233a0",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_927ed",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teaminviteproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teaminviteproxyevent" ("created", "email", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "team_id", "updated") VALUES (NEW."created", NEW."email", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."team_id", NEW."updated"); RETURN NULL;',
                    hash="87a1fe53c7a59bd5288c28a0931f2970e365e340",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_705c7",
                    table="event_teaminvite",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teaminviteproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."email" IS DISTINCT FROM (NEW."email") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."team_id" IS DISTINCT FROM (NEW."team_id") OR OLD."updated" IS DISTINCT FROM (NEW."updated"))',
                    func='INSERT INTO "pretalx_auditlog_teaminviteproxyevent" ("created", "email", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "team_id", "updated") VALUES (NEW."created", NEW."email", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."team_id", NEW."updated"); RETURN NULL;',
                    hash="6b130b8c9d1be1d65ddef37a90f82fea6bb5cee3",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_6dc36",
                    table="event_teaminvite",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teaminviteproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teaminviteproxyevent" ("created", "email", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "team_id", "updated") VALUES (OLD."created", OLD."email", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."team_id", OLD."updated"); RETURN NULL;',
                    hash="1262cf76b730da908f427cb99eb57d2202f905c6",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_2b0f3",
                    table="event_teaminvite",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teamproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teamproxyevent" ("all_events", "can_change_event_settings", "can_change_organiser_settings", "can_change_submissions", "can_change_teams", "can_create_events", "created", "force_hide_speaker_names", "id", "is_reviewer", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated") VALUES (NEW."all_events", NEW."can_change_event_settings", NEW."can_change_organiser_settings", NEW."can_change_submissions", NEW."can_change_teams", NEW."can_create_events", NEW."created", NEW."force_hide_speaker_names", NEW."id", NEW."is_reviewer", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."updated"); RETURN NULL;',
                    hash="16dce0c28f29b01893f63c4bbebadc552b1ce208",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_2597e",
                    table="event_team",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teamproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_teamproxyevent" ("all_events", "can_change_event_settings", "can_change_organiser_settings", "can_change_submissions", "can_change_teams", "can_create_events", "created", "force_hide_speaker_names", "id", "is_reviewer", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated") VALUES (NEW."all_events", NEW."can_change_event_settings", NEW."can_change_organiser_settings", NEW."can_change_submissions", NEW."can_change_teams", NEW."can_create_events", NEW."created", NEW."force_hide_speaker_names", NEW."id", NEW."is_reviewer", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."updated"); RETURN NULL;',
                    hash="986b41c8690c41e44281e6071e20c9cc9a4f8ecb",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_17c15",
                    table="event_team",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teamproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teamproxyevent" ("all_events", "can_change_event_settings", "can_change_organiser_settings", "can_change_submissions", "can_change_teams", "can_create_events", "created", "force_hide_speaker_names", "id", "is_reviewer", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated") VALUES (OLD."all_events", OLD."can_change_event_settings", OLD."can_change_organiser_settings", OLD."can_change_submissions", OLD."can_change_teams", OLD."can_create_events", OLD."created", OLD."force_hide_speaker_names", OLD."id", OLD."is_reviewer", OLD."name", OLD."organiser_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."updated"); RETURN NULL;',
                    hash="ba529723137c996de19ffac0fccfbb07c70aae0a",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_7e3a7",
                    table="event_team",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_trackproxyevent" ("color", "created", "description", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "requires_access_code") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."position", NEW."requires_access_code"); RETURN NULL;',
                    hash="2edd576f3c6ce9fdb71aa85e22f2aa88f32ecaf8",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_ceab4",
                    table="submission_track",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."color" IS DISTINCT FROM (NEW."color") OR OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."event_id" IS DISTINCT FROM (NEW."event_id") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."position" IS DISTINCT FROM (NEW."position") OR OLD."requires_access_code" IS DISTINCT FROM (NEW."requires_access_code"))',
                    func='INSERT INTO "pretalx_auditlog_trackproxyevent" ("color", "created", "description", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "requires_access_code") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."position", NEW."requires_access_code"); RETURN NULL;',
                    hash="5478c23c48b8ef5b68509cc3b5840fec8db1a9e8",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_f37bc",
                    table="submission_track",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_trackproxyevent" ("color", "created", "description", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "requires_access_code") VALUES (OLD."color", OLD."created", OLD."description", OLD."event_id", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."position", OLD."requires_access_code"); RETURN NULL;',
                    hash="6a6dce58f8424695b07bdf3ea871f9774d502763",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_7159f",
                    table="submission_track",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_userproxyevent" ("avatar", "avatar_thumbnail", "avatar_thumbnail_tiny", "code", "email", "get_gravatar", "id", "is_active", "is_administrator", "is_staff", "is_superuser", "last_login", "locale", "matrix_id", "name", "nick", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pw_reset_time", "pw_reset_token", "timezone") VALUES (NEW."avatar", NEW."avatar_thumbnail", NEW."avatar_thumbnail_tiny", NEW."code", NEW."email", NEW."get_gravatar", NEW."id", NEW."is_active", NEW."is_administrator", NEW."is_staff", NEW."is_superuser", NEW."last_login", NEW."locale", NEW."matrix_id", NEW."name", NEW."nick", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."pw_reset_time", NEW."pw_reset_token", NEW."timezone"); RETURN NULL;',
                    hash="9d8548812c2bda05cb4e60c6a41107b1890f3475",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_39385",
                    table="person_user",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."avatar" IS DISTINCT FROM (NEW."avatar") OR OLD."avatar_thumbnail" IS DISTINCT FROM (NEW."avatar_thumbnail") OR OLD."avatar_thumbnail_tiny" IS DISTINCT FROM (NEW."avatar_thumbnail_tiny") OR OLD."code" IS DISTINCT FROM (NEW."code") OR OLD."email" IS DISTINCT FROM (NEW."email") OR OLD."get_gravatar" IS DISTINCT FROM (NEW."get_gravatar") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."is_active" IS DISTINCT FROM (NEW."is_active") OR OLD."is_administrator" IS DISTINCT FROM (NEW."is_administrator") OR OLD."is_staff" IS DISTINCT FROM (NEW."is_staff") OR OLD."is_superuser" IS DISTINCT FROM (NEW."is_superuser") OR OLD."last_login" IS DISTINCT FROM (NEW."last_login") OR OLD."locale" IS DISTINCT FROM (NEW."locale") OR OLD."matrix_id" IS DISTINCT FROM (NEW."matrix_id") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."nick" IS DISTINCT FROM (NEW."nick") OR OLD."pw_reset_time" IS DISTINCT FROM (NEW."pw_reset_time") OR OLD."pw_reset_token" IS DISTINCT FROM (NEW."pw_reset_token") OR OLD."timezone" IS DISTINCT FROM (NEW."timezone"))',
                    func='INSERT INTO "pretalx_auditlog_userproxyevent" ("avatar", "avatar_thumbnail", "avatar_thumbnail_tiny", "code", "email", "get_gravatar", "id", "is_active", "is_administrator", "is_staff", "is_superuser", "last_login", "locale", "matrix_id", "name", "nick", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pw_reset_time", "pw_reset_token", "timezone") VALUES (NEW."avatar", NEW."avatar_thumbnail", NEW."avatar_thumbnail_tiny", NEW."code", NEW."email", NEW."get_gravatar", NEW."id", NEW."is_active", NEW."is_administrator", NEW."is_staff", NEW."is_superuser", NEW."last_login", NEW."locale", NEW."matrix_id", NEW."name", NEW."nick", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."pw_reset_time", NEW."pw_reset_token", NEW."timezone"); RETURN NULL;',
                    hash="ab1f0a56d142c47e34729b879200db73e79dd615",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_16334",
                    table="person_user",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_userproxyevent" ("avatar", "avatar_thumbnail", "avatar_thumbnail_tiny", "code", "email", "get_gravatar", "id", "is_active", "is_administrator", "is_staff", "is_superuser", "last_login", "locale", "matrix_id", "name", "nick", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pw_reset_time", "pw_reset_token", "timezone") VALUES (OLD."avatar", OLD."avatar_thumbnail", OLD."avatar_thumbnail_tiny", OLD."code", OLD."email", OLD."get_gravatar", OLD."id", OLD."is_active", OLD."is_administrator", OLD."is_staff", OLD."is_superuser", OLD."last_login", OLD."locale", OLD."matrix_id", OLD."name", OLD."nick", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."pw_reset_time", OLD."pw_reset_token", OLD."timezone"); RETURN NULL;',
                    hash="411788f34eac271ba89b160f33bec602ad3cb44c",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_152f1",
                    table="person_user",
                    when="AFTER",
                ),
            ),
        ),
        migrations.DeleteModel(
            name="ActivityLogProxyEvent",
        ),
    ]
