# Generated by Django 4.2.5 on 2023-12-02 20:16

from django.db import migrations
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    dependencies = [
        ("pretalx_auditlog", "0005_availabilityproxy_availabilityproxyevent_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="reviewproxy",
            name="beforedelete",
        ),
        migrations.RemoveField(
            model_name="reviewproxyevent",
            name="updated",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "user_id") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."score", NEW."submission_id", NEW."text", NEW."user_id"); RETURN NULL;',
                    hash="b491f41b170ded65f293de354522fa1f0c2520bb",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_61def",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."submission_id" IS DISTINCT FROM (NEW."submission_id") OR OLD."user_id" IS DISTINCT FROM (NEW."user_id") OR OLD."text" IS DISTINCT FROM (NEW."text") OR OLD."score" IS DISTINCT FROM (NEW."score"))',
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "user_id") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."score", NEW."submission_id", NEW."text", NEW."user_id"); RETURN NULL;',
                    hash="bf11e2a1b3af3278faced73a97f12dc832ff3e55",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_fb5d5",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "user_id") VALUES (OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."score", OLD."submission_id", OLD."text", OLD."user_id"); RETURN NULL;',
                    hash="5c7d75a2530ae12e31d60365dfbd282ec3a9ca6d",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_51e62",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
    ]
