# Generated by Django 5.1.3 on 2024-12-13 22:34

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("pretalx_auditlog", "0016_remove_userproxy_insert_insert_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="talkslotproxy",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="talkslotproxy",
            name="update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="talkslotproxy",
            name="delete_delete",
        ),
        migrations.RemoveField(
            model_name="talkslotproxyevent",
            name="is_visible",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."end", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."room_id", NEW."schedule_id", NEW."start", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="5ae842c5d119ab688db9c3c242663def5113eeba",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_1dfbd",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."end" IS DISTINCT FROM (NEW."end") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."room_id" IS DISTINCT FROM (NEW."room_id") OR OLD."schedule_id" IS DISTINCT FROM (NEW."schedule_id") OR OLD."start" IS DISTINCT FROM (NEW."start") OR OLD."submission_id" IS DISTINCT FROM (NEW."submission_id") OR OLD."updated" IS DISTINCT FROM (NEW."updated"))',
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."end", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."room_id", NEW."schedule_id", NEW."start", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="fa04580131581798ecfa38220b25211e2b9432b4",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_d2c2d",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (OLD."created", OLD."description", OLD."end", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."room_id", OLD."schedule_id", OLD."start", OLD."submission_id", OLD."updated"); RETURN NULL;',
                    hash="4eefd33c0a2a9c4f64d58115d9d27a6b4db44e8a",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_927ed",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
    ]
