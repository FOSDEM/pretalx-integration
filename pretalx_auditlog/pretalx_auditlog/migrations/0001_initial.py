# Generated by Django 4.2.5 on 2023-11-09 07:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import i18nfield.fields
import pgtrigger.compiler
import pgtrigger.migrations
import pretalx.event.models.event
import pretalx.event.models.organiser
import pretalx.person.models.information
import pretalx.person.models.user
import pretalx.submission.models.question
import pretalx.submission.models.submission


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("submission", "0074_created_updated_everywhere"),
        ("mail", "0011_created_updated_everywhere"),
        ("schedule", "0017_created_updated_everywhere"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("pghistory", "0005_events_middlewareevents"),
        ("person", "0027_created_updated_everywhere"),
        ("event", "0035_created_updated_everywhere"),
    ]

    operations = [
        migrations.CreateModel(
            name="AnswerProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.answer",),
        ),
        migrations.CreateModel(
            name="EventProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("event.event",),
        ),
        migrations.CreateModel(
            name="MailTemplateProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("mail.mailtemplate",),
        ),
        migrations.CreateModel(
            name="OrganiserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("event.organiser",),
        ),
        migrations.CreateModel(
            name="QueuedMailProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("mail.queuedmail",),
        ),
        migrations.CreateModel(
            name="ReviewProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.review",),
        ),
        migrations.CreateModel(
            name="RoomProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("schedule.room",),
        ),
        migrations.CreateModel(
            name="ScheduleProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("schedule.schedule",),
        ),
        migrations.CreateModel(
            name="SpeakerInformationProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("person.speakerinformation",),
        ),
        migrations.CreateModel(
            name="SpeakerProfileProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("person.speakerprofile",),
        ),
        migrations.CreateModel(
            name="SubmissionProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.submission",),
        ),
        migrations.CreateModel(
            name="TalkSlotProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("schedule.talkslot",),
        ),
        migrations.CreateModel(
            name="TeamInviteProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("event.teaminvite",),
        ),
        migrations.CreateModel(
            name="TeamProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("event.team",),
        ),
        migrations.CreateModel(
            name="TrackProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.track",),
        ),
        migrations.CreateModel(
            name="UserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("person.user",),
        ),
        migrations.CreateModel(
            name="UserProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("code", models.CharField(max_length=16, null=True)),
                ("nick", models.CharField(max_length=60, null=True)),
                ("name", models.CharField(max_length=120)),
                ("email", models.EmailField(max_length=254)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_administrator", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("locale", models.CharField(default="en", max_length=32)),
                ("timezone", models.CharField(default="UTC", max_length=32)),
                (
                    "avatar",
                    models.ImageField(
                        null=True, upload_to=pretalx.person.models.user.avatar_path
                    ),
                ),
                ("get_gravatar", models.BooleanField(default=False)),
                ("pw_reset_token", models.CharField(max_length=160, null=True)),
                ("pw_reset_time", models.DateTimeField(null=True)),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.userproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TrackProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", i18nfield.fields.I18nCharField(max_length=200)),
                ("description", i18nfield.fields.I18nTextField()),
                ("color", models.CharField(max_length=7)),
                ("position", models.PositiveIntegerField(null=True)),
                ("requires_access_code", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.trackproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeamProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=190)),
                ("all_events", models.BooleanField(default=False)),
                ("can_create_events", models.BooleanField(default=False)),
                ("can_change_teams", models.BooleanField(default=False)),
                ("can_change_organiser_settings", models.BooleanField(default=False)),
                ("can_change_event_settings", models.BooleanField(default=False)),
                ("can_change_submissions", models.BooleanField(default=False)),
                ("is_reviewer", models.BooleanField(default=False)),
                ("force_hide_speaker_names", models.BooleanField(default=False)),
                (
                    "organiser",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.organiser",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.teamproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeamInviteProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("email", models.EmailField(max_length=254, null=True)),
                (
                    "token",
                    models.CharField(
                        default=pretalx.event.models.organiser.generate_invite_token,
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.teaminviteproxy",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.team",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TalkSlotProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("is_visible", models.BooleanField(default=False)),
                ("start", models.DateTimeField(null=True)),
                ("end", models.DateTimeField(null=True)),
                ("description", i18nfield.fields.I18nCharField(null=True)),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.talkslotproxy",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="schedule.room",
                    ),
                ),
                (
                    "schedule",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="schedule.schedule",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submission",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubmissionProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=16)),
                ("title", models.CharField(max_length=200)),
                ("state", models.CharField(default="submitted", max_length=9)),
                (
                    "pending_state",
                    models.CharField(default=None, max_length=9, null=True),
                ),
                ("abstract", models.TextField(null=True)),
                ("description", models.TextField(null=True)),
                ("notes", models.TextField(null=True)),
                ("internal_notes", models.TextField(null=True)),
                ("duration", models.PositiveIntegerField(null=True)),
                ("slot_count", models.IntegerField(default=1)),
                ("content_locale", models.CharField(default="en", max_length=32)),
                ("is_featured", models.BooleanField(default=False)),
                ("do_not_record", models.BooleanField(default=False)),
                (
                    "image",
                    models.ImageField(
                        null=True,
                        upload_to=pretalx.submission.models.submission.submission_image_path,
                    ),
                ),
                (
                    "invitation_token",
                    models.CharField(
                        default=pretalx.submission.models.submission.generate_invite_code,
                        max_length=32,
                    ),
                ),
                (
                    "review_code",
                    models.CharField(
                        default=pretalx.submission.models.submission.generate_invite_code,
                        max_length=32,
                        null=True,
                    ),
                ),
                ("anonymised_data", models.TextField(default="{}", null=True)),
                (
                    "access_code",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submitteraccesscode",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.submissionproxy",
                    ),
                ),
                (
                    "submission_type",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submissiontype",
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.track",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpeakerProfileProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("biography", models.TextField(null=True)),
                ("has_arrived", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.speakerprofileproxy",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpeakerInformationProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("target_group", models.CharField(default="accepted", max_length=11)),
                ("title", i18nfield.fields.I18nCharField(max_length=200)),
                ("text", i18nfield.fields.I18nTextField()),
                (
                    "resource",
                    models.FileField(
                        null=True,
                        upload_to=pretalx.person.models.information.resource_path,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.speakerinformationproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScheduleProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("version", models.CharField(max_length=190, null=True)),
                ("published", models.DateTimeField(blank=True, null=True)),
                ("comment", i18nfield.fields.I18nTextField(null=True)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.scheduleproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RoomProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", i18nfield.fields.I18nCharField(max_length=100)),
                ("guid", models.UUIDField(null=True)),
                (
                    "description",
                    i18nfield.fields.I18nCharField(max_length=1000, null=True),
                ),
                (
                    "speaker_info",
                    i18nfield.fields.I18nCharField(max_length=1000, null=True),
                ),
                ("capacity", models.PositiveIntegerField(null=True)),
                ("position", models.PositiveIntegerField(null=True)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.roomproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReviewProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("text", models.TextField(null=True)),
                (
                    "score",
                    models.DecimalField(decimal_places=2, max_digits=10, null=True),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.reviewproxy",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QueuedMailProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("to", models.CharField(max_length=1000, null=True)),
                ("reply_to", models.CharField(max_length=1000, null=True)),
                ("cc", models.CharField(max_length=1000, null=True)),
                ("bcc", models.CharField(max_length=1000, null=True)),
                ("subject", models.CharField(max_length=200)),
                ("text", models.TextField()),
                ("sent", models.DateTimeField(blank=True, null=True)),
                ("locale", models.CharField(max_length=32, null=True)),
                ("attachments", models.JSONField(default=None, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.queuedmailproxy",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="mail.mailtemplate",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganiserProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", i18nfield.fields.I18nCharField(max_length=190)),
                ("slug", models.SlugField(db_index=False)),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.organiserproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MailTemplateProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("subject", i18nfield.fields.I18nCharField(max_length=200)),
                ("text", i18nfield.fields.I18nTextField()),
                ("reply_to", models.CharField(max_length=200, null=True)),
                ("bcc", models.CharField(max_length=1000, null=True)),
                ("is_auto_created", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.mailtemplateproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", i18nfield.fields.I18nCharField(max_length=200)),
                ("slug", models.SlugField(db_index=False)),
                ("is_public", models.BooleanField(default=False)),
                ("date_from", models.DateField()),
                ("date_to", models.DateField()),
                ("timezone", models.CharField(default="UTC", max_length=32)),
                ("email", models.EmailField(max_length=254)),
                ("custom_domain", models.URLField(null=True)),
                (
                    "feature_flags",
                    models.JSONField(
                        default=pretalx.event.models.event.default_feature_flags
                    ),
                ),
                (
                    "display_settings",
                    models.JSONField(
                        default=pretalx.event.models.event.default_display_settings
                    ),
                ),
                (
                    "review_settings",
                    models.JSONField(
                        default=pretalx.event.models.event.default_review_settings
                    ),
                ),
                (
                    "mail_settings",
                    models.JSONField(
                        default=pretalx.event.models.event.default_mail_settings
                    ),
                ),
                ("primary_color", models.CharField(max_length=7, null=True)),
                (
                    "custom_css",
                    models.FileField(
                        null=True, upload_to=pretalx.event.models.event.event_css_path
                    ),
                ),
                (
                    "logo",
                    models.FileField(
                        null=True, upload_to=pretalx.event.models.event.event_logo_path
                    ),
                ),
                (
                    "header_image",
                    models.FileField(
                        null=True, upload_to=pretalx.event.models.event.event_logo_path
                    ),
                ),
                ("locale_array", models.TextField(default="en")),
                ("content_locale_array", models.TextField(default="en")),
                ("locale", models.CharField(default="en", max_length=32)),
                ("landing_page_text", i18nfield.fields.I18nTextField(null=True)),
                ("featured_sessions_text", i18nfield.fields.I18nTextField(null=True)),
                ("plugins", models.TextField(null=True)),
                (
                    "accept_template",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="mail.mailtemplate",
                    ),
                ),
                (
                    "ack_template",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="mail.mailtemplate",
                    ),
                ),
                (
                    "organiser",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.organiser",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.eventproxy",
                    ),
                ),
                (
                    "question_template",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="mail.mailtemplate",
                    ),
                ),
                (
                    "reject_template",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="mail.mailtemplate",
                    ),
                ),
                (
                    "update_template",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="mail.mailtemplate",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AnswerProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("answer", models.TextField()),
                (
                    "answer_file",
                    models.FileField(
                        null=True,
                        upload_to=pretalx.submission.models.question.answer_file_path,
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.answerproxy",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.question",
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.review",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submission",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id", "updated") VALUES (NEW."answer", NEW."answer_file", NEW."created", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."question_id", NEW."review_id", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="6da66994a0e00d85aa48ce9e88890fdaa539414f",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_34895",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id", "updated") VALUES (NEW."answer", NEW."answer_file", NEW."created", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."question_id", NEW."review_id", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="716dca7e323c57574ac682c22bc40a35b716ec6c",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_d1e96",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id", "updated") VALUES (OLD."answer", OLD."answer_file", OLD."created", OLD."id", OLD."person_id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."question_id", OLD."review_id", OLD."submission_id", OLD."updated"); RETURN NULL;',
                    hash="744d8fd38c035cde2543f4d4ffb3d050addf8242",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_07b3f",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_eventproxyevent" ("accept_template_id", "ack_template_id", "content_locale_array", "created", "custom_css", "custom_domain", "date_from", "date_to", "display_settings", "email", "feature_flags", "featured_sessions_text", "header_image", "id", "is_public", "landing_page_text", "locale", "locale_array", "logo", "mail_settings", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plugins", "primary_color", "question_template_id", "reject_template_id", "review_settings", "slug", "timezone", "update_template_id", "updated") VALUES (NEW."accept_template_id", NEW."ack_template_id", NEW."content_locale_array", NEW."created", NEW."custom_css", NEW."custom_domain", NEW."date_from", NEW."date_to", NEW."display_settings", NEW."email", NEW."feature_flags", NEW."featured_sessions_text", NEW."header_image", NEW."id", NEW."is_public", NEW."landing_page_text", NEW."locale", NEW."locale_array", NEW."logo", NEW."mail_settings", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."plugins", NEW."primary_color", NEW."question_template_id", NEW."reject_template_id", NEW."review_settings", NEW."slug", NEW."timezone", NEW."update_template_id", NEW."updated"); RETURN NULL;',
                    hash="67b39bbe6cf393b5d4e32931f7960e8ff0e9467a",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_adba0",
                    table="event_event",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_eventproxyevent" ("accept_template_id", "ack_template_id", "content_locale_array", "created", "custom_css", "custom_domain", "date_from", "date_to", "display_settings", "email", "feature_flags", "featured_sessions_text", "header_image", "id", "is_public", "landing_page_text", "locale", "locale_array", "logo", "mail_settings", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plugins", "primary_color", "question_template_id", "reject_template_id", "review_settings", "slug", "timezone", "update_template_id", "updated") VALUES (NEW."accept_template_id", NEW."ack_template_id", NEW."content_locale_array", NEW."created", NEW."custom_css", NEW."custom_domain", NEW."date_from", NEW."date_to", NEW."display_settings", NEW."email", NEW."feature_flags", NEW."featured_sessions_text", NEW."header_image", NEW."id", NEW."is_public", NEW."landing_page_text", NEW."locale", NEW."locale_array", NEW."logo", NEW."mail_settings", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."plugins", NEW."primary_color", NEW."question_template_id", NEW."reject_template_id", NEW."review_settings", NEW."slug", NEW."timezone", NEW."update_template_id", NEW."updated"); RETURN NULL;',
                    hash="7bc2e972b7743e48ab6404bc1e883586ec9eb841",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_c062e",
                    table="event_event",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_eventproxyevent" ("accept_template_id", "ack_template_id", "content_locale_array", "created", "custom_css", "custom_domain", "date_from", "date_to", "display_settings", "email", "feature_flags", "featured_sessions_text", "header_image", "id", "is_public", "landing_page_text", "locale", "locale_array", "logo", "mail_settings", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plugins", "primary_color", "question_template_id", "reject_template_id", "review_settings", "slug", "timezone", "update_template_id", "updated") VALUES (OLD."accept_template_id", OLD."ack_template_id", OLD."content_locale_array", OLD."created", OLD."custom_css", OLD."custom_domain", OLD."date_from", OLD."date_to", OLD."display_settings", OLD."email", OLD."feature_flags", OLD."featured_sessions_text", OLD."header_image", OLD."id", OLD."is_public", OLD."landing_page_text", OLD."locale", OLD."locale_array", OLD."logo", OLD."mail_settings", OLD."name", OLD."organiser_id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."plugins", OLD."primary_color", OLD."question_template_id", OLD."reject_template_id", OLD."review_settings", OLD."slug", OLD."timezone", OLD."update_template_id", OLD."updated"); RETURN NULL;',
                    hash="a4c2b60cd22ba43ccaf3b7740be7c32091cbfcb2",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_a064f",
                    table="event_event",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mailtemplateproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_mailtemplateproxyevent" ("bcc", "created", "event_id", "id", "is_auto_created", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "subject", "text", "updated") VALUES (NEW."bcc", NEW."created", NEW."event_id", NEW."id", NEW."is_auto_created", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reply_to", NEW."subject", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="1cd0f962ade2a5fbc8d29f51e5a7990b4c432c58",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_b1d9d",
                    table="mail_mailtemplate",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mailtemplateproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_mailtemplateproxyevent" ("bcc", "created", "event_id", "id", "is_auto_created", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "subject", "text", "updated") VALUES (NEW."bcc", NEW."created", NEW."event_id", NEW."id", NEW."is_auto_created", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reply_to", NEW."subject", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="1166d229d5ef276b54630fb3e3b06bc39bb891ca",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_b51f6",
                    table="mail_mailtemplate",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mailtemplateproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_mailtemplateproxyevent" ("bcc", "created", "event_id", "id", "is_auto_created", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "subject", "text", "updated") VALUES (OLD."bcc", OLD."created", OLD."event_id", OLD."id", OLD."is_auto_created", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."reply_to", OLD."subject", OLD."text", OLD."updated"); RETURN NULL;',
                    hash="aedaba4e2f71250bfb3e49d011e84fa7f7711d20",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_cd1da",
                    table="mail_mailtemplate",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="organiserproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_organiserproxyevent" ("created", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated") VALUES (NEW."created", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."slug", NEW."updated"); RETURN NULL;',
                    hash="da090d26376e7dde5cdf6c892ab925550be7ab0a",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_90ed6",
                    table="event_organiser",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="organiserproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_organiserproxyevent" ("created", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated") VALUES (NEW."created", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."slug", NEW."updated"); RETURN NULL;',
                    hash="e658ad88e39379b837ab19e1758076ab8e99ff00",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_6b1cc",
                    table="event_organiser",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="organiserproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_organiserproxyevent" ("created", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated") VALUES (OLD."created", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."slug", OLD."updated"); RETURN NULL;',
                    hash="dbf6851e1dc606a440c9de99431769fdbfb8dfa5",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_56217",
                    table="event_organiser",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queuedmailproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_queuedmailproxyevent" ("attachments", "bcc", "cc", "created", "event_id", "id", "locale", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "sent", "subject", "template_id", "text", "to", "updated") VALUES (NEW."attachments", NEW."bcc", NEW."cc", NEW."created", NEW."event_id", NEW."id", NEW."locale", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reply_to", NEW."sent", NEW."subject", NEW."template_id", NEW."text", NEW."to", NEW."updated"); RETURN NULL;',
                    hash="f9cbeac22f77f5bb3d3b05e658fdf39e9b3e13f6",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_94cec",
                    table="mail_queuedmail",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queuedmailproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_queuedmailproxyevent" ("attachments", "bcc", "cc", "created", "event_id", "id", "locale", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "sent", "subject", "template_id", "text", "to", "updated") VALUES (NEW."attachments", NEW."bcc", NEW."cc", NEW."created", NEW."event_id", NEW."id", NEW."locale", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reply_to", NEW."sent", NEW."subject", NEW."template_id", NEW."text", NEW."to", NEW."updated"); RETURN NULL;',
                    hash="8e4e542d4a3d6f419c102e4ed3c5fee7320733b8",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_a7ce1",
                    table="mail_queuedmail",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queuedmailproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_queuedmailproxyevent" ("attachments", "bcc", "cc", "created", "event_id", "id", "locale", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply_to", "sent", "subject", "template_id", "text", "to", "updated") VALUES (OLD."attachments", OLD."bcc", OLD."cc", OLD."created", OLD."event_id", OLD."id", OLD."locale", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."reply_to", OLD."sent", OLD."subject", OLD."template_id", OLD."text", OLD."to", OLD."updated"); RETURN NULL;',
                    hash="0c00fa3a95c1f301131e3b6dcded089930071e6d",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_1cc6d",
                    table="mail_queuedmail",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "updated", "user_id") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."score", NEW."submission_id", NEW."text", NEW."updated", NEW."user_id"); RETURN NULL;',
                    hash="ec9b1f4e208fb61bc49cf93b95b42bc44012fbac",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_61def",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "updated", "user_id") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."score", NEW."submission_id", NEW."text", NEW."updated", NEW."user_id"); RETURN NULL;',
                    hash="0759cef203b894969663063b0c0d0a88dc9020d4",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_fb5d5",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "submission_id", "text", "updated", "user_id") VALUES (OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."score", OLD."submission_id", OLD."text", OLD."updated", OLD."user_id"); RETURN NULL;',
                    hash="c14c1a637bde54c4f808ed0aa5f9ed743847a693",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_51e62",
                    table="submission_review",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="roomproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_roomproxyevent" ("capacity", "created", "description", "event_id", "guid", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "speaker_info", "updated") VALUES (NEW."capacity", NEW."created", NEW."description", NEW."event_id", NEW."guid", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."speaker_info", NEW."updated"); RETURN NULL;',
                    hash="82e689a9aca6614bbc132fdfac9090de25cf1a16",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_fedda",
                    table="schedule_room",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="roomproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_roomproxyevent" ("capacity", "created", "description", "event_id", "guid", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "speaker_info", "updated") VALUES (NEW."capacity", NEW."created", NEW."description", NEW."event_id", NEW."guid", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."speaker_info", NEW."updated"); RETURN NULL;',
                    hash="0658bb4f89ac12e8eac30ad14b8d2a796acbb40b",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_f34ea",
                    table="schedule_room",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="roomproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_roomproxyevent" ("capacity", "created", "description", "event_id", "guid", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "speaker_info", "updated") VALUES (OLD."capacity", OLD."created", OLD."description", OLD."event_id", OLD."guid", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."position", OLD."speaker_info", OLD."updated"); RETURN NULL;',
                    hash="7a78fa0f77cf92bdf810107da529ec5158e5e153",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_16b19",
                    table="schedule_room",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="scheduleproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_scheduleproxyevent" ("comment", "created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "updated", "version") VALUES (NEW."comment", NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."published", NEW."updated", NEW."version"); RETURN NULL;',
                    hash="ba0cd2d832797dba4d31147017a3a2d9bfb4abc9",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_13c0a",
                    table="schedule_schedule",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="scheduleproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_scheduleproxyevent" ("comment", "created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "updated", "version") VALUES (NEW."comment", NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."published", NEW."updated", NEW."version"); RETURN NULL;',
                    hash="f0ef1c131458c72c60469a59f01038b5cf3e2781",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_f04c6",
                    table="schedule_schedule",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="scheduleproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_scheduleproxyevent" ("comment", "created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "updated", "version") VALUES (OLD."comment", OLD."created", OLD."event_id", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."published", OLD."updated", OLD."version"); RETURN NULL;',
                    hash="597213b184d0c0ddb15db3321515e34cc996120c",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_545d7",
                    table="schedule_schedule",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerinformationproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerinformationproxyevent" ("created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "target_group", "text", "title", "updated") VALUES (NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."resource", NEW."target_group", NEW."text", NEW."title", NEW."updated"); RETURN NULL;',
                    hash="53abf030d59e8442a9bf1df8fd294fc8c3077006",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_2be3f",
                    table="person_speakerinformation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerinformationproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_speakerinformationproxyevent" ("created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "target_group", "text", "title", "updated") VALUES (NEW."created", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."resource", NEW."target_group", NEW."text", NEW."title", NEW."updated"); RETURN NULL;',
                    hash="737c7ea532e8964fc06c91b0689a0e1ed2641552",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_fb007",
                    table="person_speakerinformation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerinformationproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerinformationproxyevent" ("created", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "target_group", "text", "title", "updated") VALUES (OLD."created", OLD."event_id", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."resource", OLD."target_group", OLD."text", OLD."title", OLD."updated"); RETURN NULL;',
                    hash="b4d24545d771149392b353186f145149df274e5e",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_f7218",
                    table="person_speakerinformation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerprofileproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerprofileproxyevent" ("biography", "created", "event_id", "has_arrived", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "user_id") VALUES (NEW."biography", NEW."created", NEW."event_id", NEW."has_arrived", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."updated", NEW."user_id"); RETURN NULL;',
                    hash="bf8ed42ecdd903027768bf3b4cd5a79842758562",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_4ff9b",
                    table="person_speakerprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerprofileproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_speakerprofileproxyevent" ("biography", "created", "event_id", "has_arrived", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "user_id") VALUES (NEW."biography", NEW."created", NEW."event_id", NEW."has_arrived", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."updated", NEW."user_id"); RETURN NULL;',
                    hash="31e41ec5fd183392239ff9a8b4ec87a7919f3aca",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_c5802",
                    table="person_speakerprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="speakerprofileproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_speakerprofileproxyevent" ("biography", "created", "event_id", "has_arrived", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "user_id") VALUES (OLD."biography", OLD."created", OLD."event_id", OLD."has_arrived", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."updated", OLD."user_id"); RETURN NULL;',
                    hash="55f9331b997aa3a6273a4eefe46ba45e02a1322b",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_adad5",
                    table="person_speakerprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissionproxyevent" ("abstract", "access_code_id", "anonymised_data", "code", "content_locale", "created", "description", "do_not_record", "duration", "event_id", "id", "image", "internal_notes", "invitation_token", "is_featured", "notes", "pending_state", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "review_code", "slot_count", "state", "submission_type_id", "title", "track_id", "updated") VALUES (NEW."abstract", NEW."access_code_id", NEW."anonymised_data", NEW."code", NEW."content_locale", NEW."created", NEW."description", NEW."do_not_record", NEW."duration", NEW."event_id", NEW."id", NEW."image", NEW."internal_notes", NEW."invitation_token", NEW."is_featured", NEW."notes", NEW."pending_state", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."review_code", NEW."slot_count", NEW."state", NEW."submission_type_id", NEW."title", NEW."track_id", NEW."updated"); RETURN NULL;',
                    hash="0a16f645f29b6a46e98791ee15b8e41f5d330b01",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_505a6",
                    table="submission_submission",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_submissionproxyevent" ("abstract", "access_code_id", "anonymised_data", "code", "content_locale", "created", "description", "do_not_record", "duration", "event_id", "id", "image", "internal_notes", "invitation_token", "is_featured", "notes", "pending_state", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "review_code", "slot_count", "state", "submission_type_id", "title", "track_id", "updated") VALUES (NEW."abstract", NEW."access_code_id", NEW."anonymised_data", NEW."code", NEW."content_locale", NEW."created", NEW."description", NEW."do_not_record", NEW."duration", NEW."event_id", NEW."id", NEW."image", NEW."internal_notes", NEW."invitation_token", NEW."is_featured", NEW."notes", NEW."pending_state", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."review_code", NEW."slot_count", NEW."state", NEW."submission_type_id", NEW."title", NEW."track_id", NEW."updated"); RETURN NULL;',
                    hash="a819b6eae45db6902438d95d8cadaba565c88f61",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_49420",
                    table="submission_submission",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissionproxyevent" ("abstract", "access_code_id", "anonymised_data", "code", "content_locale", "created", "description", "do_not_record", "duration", "event_id", "id", "image", "internal_notes", "invitation_token", "is_featured", "notes", "pending_state", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "review_code", "slot_count", "state", "submission_type_id", "title", "track_id", "updated") VALUES (OLD."abstract", OLD."access_code_id", OLD."anonymised_data", OLD."code", OLD."content_locale", OLD."created", OLD."description", OLD."do_not_record", OLD."duration", OLD."event_id", OLD."id", OLD."image", OLD."internal_notes", OLD."invitation_token", OLD."is_featured", OLD."notes", OLD."pending_state", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."review_code", OLD."slot_count", OLD."state", OLD."submission_type_id", OLD."title", OLD."track_id", OLD."updated"); RETURN NULL;',
                    hash="079249c2af6896a3c00729b246c41c048faaf079",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_c739f",
                    table="submission_submission",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "is_visible", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."end", NEW."id", NEW."is_visible", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."room_id", NEW."schedule_id", NEW."start", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="e48ab819eac38df1aca7418fc66e62034b510a21",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_02706",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "is_visible", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."end", NEW."id", NEW."is_visible", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."room_id", NEW."schedule_id", NEW."start", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="73b4e4258c72bebca9220aaac442afd2ac2b0e02",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_67aee",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="talkslotproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_talkslotproxyevent" ("created", "description", "end", "id", "is_visible", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "room_id", "schedule_id", "start", "submission_id", "updated") VALUES (OLD."created", OLD."description", OLD."end", OLD."id", OLD."is_visible", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."room_id", OLD."schedule_id", OLD."start", OLD."submission_id", OLD."updated"); RETURN NULL;',
                    hash="b77c60a3fbb568a555af312616a604783508a800",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_c9555",
                    table="schedule_talkslot",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teaminviteproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teaminviteproxyevent" ("created", "email", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "team_id", "token", "updated") VALUES (NEW."created", NEW."email", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."team_id", NEW."token", NEW."updated"); RETURN NULL;',
                    hash="884f1e9f797ae6767ef0ec1bb9ed30126b988b2b",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_58296",
                    table="event_teaminvite",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teaminviteproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_teaminviteproxyevent" ("created", "email", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "team_id", "token", "updated") VALUES (NEW."created", NEW."email", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."team_id", NEW."token", NEW."updated"); RETURN NULL;',
                    hash="8a9f796732e24deac89afb740bfadb7945186c20",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_7e855",
                    table="event_teaminvite",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teaminviteproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teaminviteproxyevent" ("created", "email", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "team_id", "token", "updated") VALUES (OLD."created", OLD."email", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."team_id", OLD."token", OLD."updated"); RETURN NULL;',
                    hash="c1e63833cc560ac08ea1cfbb489e5a8ad9558876",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_5ea7d",
                    table="event_teaminvite",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teamproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teamproxyevent" ("all_events", "can_change_event_settings", "can_change_organiser_settings", "can_change_submissions", "can_change_teams", "can_create_events", "created", "force_hide_speaker_names", "id", "is_reviewer", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated") VALUES (NEW."all_events", NEW."can_change_event_settings", NEW."can_change_organiser_settings", NEW."can_change_submissions", NEW."can_change_teams", NEW."can_create_events", NEW."created", NEW."force_hide_speaker_names", NEW."id", NEW."is_reviewer", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."updated"); RETURN NULL;',
                    hash="1610b92c236f4281d4d752c6c6a0cc8bdbdf61e4",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_2d39e",
                    table="event_team",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teamproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_teamproxyevent" ("all_events", "can_change_event_settings", "can_change_organiser_settings", "can_change_submissions", "can_change_teams", "can_create_events", "created", "force_hide_speaker_names", "id", "is_reviewer", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated") VALUES (NEW."all_events", NEW."can_change_event_settings", NEW."can_change_organiser_settings", NEW."can_change_submissions", NEW."can_change_teams", NEW."can_create_events", NEW."created", NEW."force_hide_speaker_names", NEW."id", NEW."is_reviewer", NEW."name", NEW."organiser_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."updated"); RETURN NULL;',
                    hash="088213ade3605892bbabf39ed822b4aa976d51b6",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_7c778",
                    table="event_team",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="teamproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_teamproxyevent" ("all_events", "can_change_event_settings", "can_change_organiser_settings", "can_change_submissions", "can_change_teams", "can_create_events", "created", "force_hide_speaker_names", "id", "is_reviewer", "name", "organiser_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated") VALUES (OLD."all_events", OLD."can_change_event_settings", OLD."can_change_organiser_settings", OLD."can_change_submissions", OLD."can_change_teams", OLD."can_create_events", OLD."created", OLD."force_hide_speaker_names", OLD."id", OLD."is_reviewer", OLD."name", OLD."organiser_id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."updated"); RETURN NULL;',
                    hash="d726431211eeb6a977748dedbc7c15a28708b172",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_6c96f",
                    table="event_team",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_trackproxyevent" ("color", "created", "description", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "requires_access_code", "updated") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."requires_access_code", NEW."updated"); RETURN NULL;',
                    hash="8d4ff251d10f81333cb1d32c83c14c19f1cc0e2c",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_f67ec",
                    table="submission_track",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_trackproxyevent" ("color", "created", "description", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "requires_access_code", "updated") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."requires_access_code", NEW."updated"); RETURN NULL;',
                    hash="31287faa503411dcba6095a347e4181528647766",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_e2b2f",
                    table="submission_track",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_trackproxyevent" ("color", "created", "description", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "requires_access_code", "updated") VALUES (OLD."color", OLD."created", OLD."description", OLD."event_id", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."position", OLD."requires_access_code", OLD."updated"); RETURN NULL;',
                    hash="445bdb9df9d166615fff510510584f0c0fc9f432",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_62bcf",
                    table="submission_track",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_userproxyevent" ("avatar", "code", "email", "get_gravatar", "id", "is_active", "is_administrator", "is_staff", "is_superuser", "last_login", "locale", "name", "nick", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pw_reset_time", "pw_reset_token", "timezone") VALUES (NEW."avatar", NEW."code", NEW."email", NEW."get_gravatar", NEW."id", NEW."is_active", NEW."is_administrator", NEW."is_staff", NEW."is_superuser", NEW."last_login", NEW."locale", NEW."name", NEW."nick", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."pw_reset_time", NEW."pw_reset_token", NEW."timezone"); RETURN NULL;',
                    hash="27bbf897a314768106e0bd6c720469cad207ddfc",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_7392b",
                    table="person_user",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."last_login" IS DISTINCT FROM (NEW."last_login") OR OLD."code" IS DISTINCT FROM (NEW."code") OR OLD."nick" IS DISTINCT FROM (NEW."nick") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."email" IS DISTINCT FROM (NEW."email") OR OLD."is_active" IS DISTINCT FROM (NEW."is_active") OR OLD."is_staff" IS DISTINCT FROM (NEW."is_staff") OR OLD."is_administrator" IS DISTINCT FROM (NEW."is_administrator") OR OLD."is_superuser" IS DISTINCT FROM (NEW."is_superuser") OR OLD."locale" IS DISTINCT FROM (NEW."locale") OR OLD."timezone" IS DISTINCT FROM (NEW."timezone") OR OLD."avatar" IS DISTINCT FROM (NEW."avatar") OR OLD."get_gravatar" IS DISTINCT FROM (NEW."get_gravatar") OR OLD."pw_reset_token" IS DISTINCT FROM (NEW."pw_reset_token") OR OLD."pw_reset_time" IS DISTINCT FROM (NEW."pw_reset_time"))',
                    func='INSERT INTO "pretalx_auditlog_userproxyevent" ("avatar", "code", "email", "get_gravatar", "id", "is_active", "is_administrator", "is_staff", "is_superuser", "last_login", "locale", "name", "nick", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pw_reset_time", "pw_reset_token", "timezone") VALUES (NEW."avatar", NEW."code", NEW."email", NEW."get_gravatar", NEW."id", NEW."is_active", NEW."is_administrator", NEW."is_staff", NEW."is_superuser", NEW."last_login", NEW."locale", NEW."name", NEW."nick", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."pw_reset_time", NEW."pw_reset_token", NEW."timezone"); RETURN NULL;',
                    hash="d50041e8d070f904922dc19f249a81164efc2bd5",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_f6b5c",
                    table="person_user",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_userproxyevent" ("avatar", "code", "email", "get_gravatar", "id", "is_active", "is_administrator", "is_staff", "is_superuser", "last_login", "locale", "name", "nick", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pw_reset_time", "pw_reset_token", "timezone") VALUES (OLD."avatar", OLD."code", OLD."email", OLD."get_gravatar", OLD."id", OLD."is_active", OLD."is_administrator", OLD."is_staff", OLD."is_superuser", OLD."last_login", OLD."locale", OLD."name", OLD."nick", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."pw_reset_time", OLD."pw_reset_token", OLD."timezone"); RETURN NULL;',
                    hash="bd814d017ffffba9417bb37f8b6b9e7d98c15a0a",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_01ad6",
                    table="person_user",
                    when="AFTER",
                ),
            ),
        ),
    ]
