# Generated by Django 4.2.5 on 2023-12-12 20:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import i18nfield.fields
import pgtrigger.compiler
import pgtrigger.migrations
import pretalx.submission.models.cfp
import pretalx.submission.models.resource


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("submission", "0074_created_updated_everywhere"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("event", "0035_created_updated_everywhere"),
        ("pghistory", "0005_events_middlewareevents"),
        ("common", "0005_auto_20180202_1116"),
        ("pretalx_auditlog", "0007_remove_answerproxy_snapshot_insert_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActivityLogProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("common.activitylog",),
        ),
        migrations.CreateModel(
            name="AnswerOptionProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.answeroption",),
        ),
        migrations.CreateModel(
            name="CfPProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.cfp",),
        ),
        migrations.CreateModel(
            name="FeedbackProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.feedback",),
        ),
        migrations.CreateModel(
            name="QuestionProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.question",),
        ),
        migrations.CreateModel(
            name="ResourceProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.resource",),
        ),
        migrations.CreateModel(
            name="ReviewPhaseProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.reviewphase",),
        ),
        migrations.CreateModel(
            name="ReviewScoreCategoryProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.reviewscorecategory",),
        ),
        migrations.CreateModel(
            name="ReviewScoreProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.reviewscore",),
        ),
        migrations.CreateModel(
            name="SubmissionTypeProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.submissiontype",),
        ),
        migrations.CreateModel(
            name="SubmitterAccessCodeProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.submitteraccesscode",),
        ),
        migrations.CreateModel(
            name="TagProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("submission.tag",),
        ),
        migrations.CreateModel(
            name="TagProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("tag", models.CharField(max_length=50)),
                ("description", i18nfield.fields.I18nTextField()),
                ("color", models.CharField(max_length=7)),
                ("public", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.tagproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubmitterAccessCodeProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=255)),
                ("valid_until", models.DateTimeField(blank=True, null=True)),
                ("maximum_uses", models.PositiveIntegerField(default=1, null=True)),
                ("redeemed", models.PositiveIntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.submitteraccesscodeproxy",
                    ),
                ),
                (
                    "submission_type",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submissiontype",
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.track",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubmissionTypeProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", i18nfield.fields.I18nCharField(max_length=100)),
                ("default_duration", models.PositiveIntegerField(default=30)),
                ("deadline", models.DateTimeField(blank=True, null=True)),
                ("requires_access_code", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.submissiontypeproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReviewScoreProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("value", models.DecimalField(decimal_places=2, max_digits=7)),
                ("label", models.CharField(max_length=200, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.reviewscorecategory",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.reviewscoreproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReviewScoreCategoryProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", i18nfield.fields.I18nCharField()),
                (
                    "weight",
                    models.DecimalField(decimal_places=1, default=1, max_digits=4),
                ),
                ("required", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                ("is_independent", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.reviewscorecategoryproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReviewPhaseProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("start", models.DateTimeField(blank=True, null=True)),
                ("end", models.DateTimeField(blank=True, null=True)),
                ("position", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=False)),
                ("can_review", models.BooleanField(default=True)),
                ("proposal_visibility", models.CharField(default="all", max_length=8)),
                (
                    "can_see_other_reviews",
                    models.CharField(default="after_review", max_length=12),
                ),
                ("can_see_speaker_names", models.BooleanField(default=True)),
                ("can_see_reviewer_names", models.BooleanField(default=True)),
                ("can_change_submission_state", models.BooleanField(default=False)),
                (
                    "can_tag_submissions",
                    models.CharField(default="never", max_length=12),
                ),
                ("speakers_can_change_submissions", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.reviewphaseproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ResourceProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "resource",
                    models.FileField(
                        null=True,
                        upload_to=pretalx.submission.models.resource.resource_path,
                    ),
                ),
                ("link", models.URLField(null=True)),
                ("description", models.CharField(max_length=1000, null=True)),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.resourceproxy",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submission",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("variant", models.CharField(default="string", max_length=15)),
                ("target", models.CharField(default="submission", max_length=10)),
                ("deadline", models.DateTimeField(blank=True, null=True)),
                ("freeze_after", models.DateTimeField(blank=True, null=True)),
                (
                    "question_required",
                    models.CharField(default="optional", max_length=14),
                ),
                ("question", i18nfield.fields.I18nCharField(max_length=800)),
                (
                    "help_text",
                    i18nfield.fields.I18nCharField(max_length=800, null=True),
                ),
                ("default_answer", models.TextField(null=True)),
                ("position", models.IntegerField(default=0)),
                ("active", models.BooleanField(default=True)),
                ("contains_personal_data", models.BooleanField(default=True)),
                ("min_length", models.PositiveIntegerField(null=True)),
                ("max_length", models.PositiveIntegerField(null=True)),
                (
                    "min_number",
                    models.DecimalField(decimal_places=6, max_digits=16, null=True),
                ),
                (
                    "max_number",
                    models.DecimalField(decimal_places=6, max_digits=16, null=True),
                ),
                ("min_date", models.DateField(blank=True, null=True)),
                ("max_date", models.DateField(blank=True, null=True)),
                ("min_datetime", models.DateTimeField(blank=True, null=True)),
                ("max_datetime", models.DateTimeField(blank=True, null=True)),
                ("is_public", models.BooleanField(default=False)),
                ("is_visible_to_reviewers", models.BooleanField(default=True)),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.questionproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FeedbackProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("rating", models.IntegerField(null=True)),
                ("review", models.TextField()),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.feedbackproxy",
                    ),
                ),
                (
                    "speaker",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "talk",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submission",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CfPProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("headline", i18nfield.fields.I18nCharField(max_length=300, null=True)),
                ("text", i18nfield.fields.I18nTextField(null=True)),
                ("deadline", models.DateTimeField(blank=True, null=True)),
                (
                    "settings",
                    models.JSONField(
                        default=pretalx.submission.models.cfp.default_settings
                    ),
                ),
                (
                    "fields",
                    models.JSONField(
                        default=pretalx.submission.models.cfp.default_fields
                    ),
                ),
                (
                    "default_type",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.submissiontype",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.cfpproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AnswerOptionProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("answer", i18nfield.fields.I18nCharField()),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.answeroptionproxy",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="submission.question",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ActivityLogProxyEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField()),
                ("id", models.IntegerField()),
                ("object_id", models.PositiveIntegerField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("action_type", models.CharField(max_length=200)),
                ("data", models.TextField(null=True)),
                ("is_orga_action", models.BooleanField(default=False)),
                (
                    "content_type",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="event.event",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="log_events",
                        related_query_name="log_events",
                        to="pretalx_auditlog.activitylogproxy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="activitylogproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_activitylogproxyevent" ("action_type", "content_type_id", "data", "event_id", "id", "is_orga_action", "object_id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "timestamp") VALUES (NEW."action_type", NEW."content_type_id", NEW."data", NEW."event_id", NEW."id", NEW."is_orga_action", NEW."object_id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."timestamp"); RETURN NULL;',
                    hash="67f4dc55ee1d6f6c33324196fb1b9410e335e3c5",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_1ece5",
                    table="common_activitylog",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="activitylogproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_activitylogproxyevent" ("action_type", "content_type_id", "data", "event_id", "id", "is_orga_action", "object_id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "timestamp") VALUES (NEW."action_type", NEW."content_type_id", NEW."data", NEW."event_id", NEW."id", NEW."is_orga_action", NEW."object_id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."timestamp"); RETURN NULL;',
                    hash="b92b7df227a121e9066631fa22afefe0a07b3655",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_8c220",
                    table="common_activitylog",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="activitylogproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_activitylogproxyevent" ("action_type", "content_type_id", "data", "event_id", "id", "is_orga_action", "object_id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "timestamp") VALUES (OLD."action_type", OLD."content_type_id", OLD."data", OLD."event_id", OLD."id", OLD."is_orga_action", OLD."object_id", OLD."person_id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."timestamp"); RETURN NULL;',
                    hash="504306912f85ce4a69b08d742cd4291398069825",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_afecd",
                    table="common_activitylog",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answeroptionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answeroptionproxyevent" ("answer", "created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "updated") VALUES (NEW."answer", NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."question_id", NEW."updated"); RETURN NULL;',
                    hash="bd9bbe6b7b3058deae7cb080921c80788203a31c",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_f4cfb",
                    table="submission_answeroption",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answeroptionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_answeroptionproxyevent" ("answer", "created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "updated") VALUES (NEW."answer", NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."question_id", NEW."updated"); RETURN NULL;',
                    hash="60d7a82edbce23c2105fa8cca7f702c1ee4da335",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_e1e5b",
                    table="submission_answeroption",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answeroptionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answeroptionproxyevent" ("answer", "created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "updated") VALUES (OLD."answer", OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."question_id", OLD."updated"); RETURN NULL;',
                    hash="12610e5746fb029805e2340c39449765e4d43428",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_6c237",
                    table="submission_answeroption",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="cfpproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_cfpproxyevent" ("created", "deadline", "default_type_id", "event_id", "fields", "headline", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "settings", "text", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_type_id", NEW."event_id", NEW."fields", NEW."headline", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."settings", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="7859a4a1d360032c086bd66135ee8b1cb96d4413",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_99545",
                    table="submission_cfp",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="cfpproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_cfpproxyevent" ("created", "deadline", "default_type_id", "event_id", "fields", "headline", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "settings", "text", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_type_id", NEW."event_id", NEW."fields", NEW."headline", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."settings", NEW."text", NEW."updated"); RETURN NULL;',
                    hash="8875093da5a6c5a54403611974cd70072ca9ccea",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_1a7b7",
                    table="submission_cfp",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="cfpproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_cfpproxyevent" ("created", "deadline", "default_type_id", "event_id", "fields", "headline", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "settings", "text", "updated") VALUES (OLD."created", OLD."deadline", OLD."default_type_id", OLD."event_id", OLD."fields", OLD."headline", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."settings", OLD."text", OLD."updated"); RETURN NULL;',
                    hash="697327348ecd23da4e40c422391bd64298c86627",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_d7eea",
                    table="submission_cfp",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="feedbackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_feedbackproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "review", "speaker_id", "talk_id", "updated") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."rating", NEW."review", NEW."speaker_id", NEW."talk_id", NEW."updated"); RETURN NULL;',
                    hash="88e27bff03dd9d4707ced12b387ccbf87918d673",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_6d845",
                    table="submission_feedback",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="feedbackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_feedbackproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "review", "speaker_id", "talk_id", "updated") VALUES (NEW."created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."rating", NEW."review", NEW."speaker_id", NEW."talk_id", NEW."updated"); RETURN NULL;',
                    hash="b680be661252b25ece109350749ec6870dbb69c9",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_98cca",
                    table="submission_feedback",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="feedbackproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_feedbackproxyevent" ("created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "review", "speaker_id", "talk_id", "updated") VALUES (OLD."created", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."rating", OLD."review", OLD."speaker_id", OLD."talk_id", OLD."updated"); RETURN NULL;',
                    hash="a282672cb80be10941239a16234bce69aceebbd1",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_02f4d",
                    table="submission_feedback",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="questionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_questionproxyevent" ("active", "contains_personal_data", "created", "deadline", "default_answer", "event_id", "freeze_after", "help_text", "id", "is_public", "is_visible_to_reviewers", "max_date", "max_datetime", "max_length", "max_number", "min_date", "min_datetime", "min_length", "min_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question", "question_required", "target", "updated", "variant") VALUES (NEW."active", NEW."contains_personal_data", NEW."created", NEW."deadline", NEW."default_answer", NEW."event_id", NEW."freeze_after", NEW."help_text", NEW."id", NEW."is_public", NEW."is_visible_to_reviewers", NEW."max_date", NEW."max_datetime", NEW."max_length", NEW."max_number", NEW."min_date", NEW."min_datetime", NEW."min_length", NEW."min_number", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."question", NEW."question_required", NEW."target", NEW."updated", NEW."variant"); RETURN NULL;',
                    hash="3b36eecd6d26d1bab82b20c8018e7b329cddecea",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_6173e",
                    table="submission_question",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="questionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_questionproxyevent" ("active", "contains_personal_data", "created", "deadline", "default_answer", "event_id", "freeze_after", "help_text", "id", "is_public", "is_visible_to_reviewers", "max_date", "max_datetime", "max_length", "max_number", "min_date", "min_datetime", "min_length", "min_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question", "question_required", "target", "updated", "variant") VALUES (NEW."active", NEW."contains_personal_data", NEW."created", NEW."deadline", NEW."default_answer", NEW."event_id", NEW."freeze_after", NEW."help_text", NEW."id", NEW."is_public", NEW."is_visible_to_reviewers", NEW."max_date", NEW."max_datetime", NEW."max_length", NEW."max_number", NEW."min_date", NEW."min_datetime", NEW."min_length", NEW."min_number", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."question", NEW."question_required", NEW."target", NEW."updated", NEW."variant"); RETURN NULL;',
                    hash="afb92df1a67e2f5449679453ba11e9a1d333dd4e",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_13083",
                    table="submission_question",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="questionproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_questionproxyevent" ("active", "contains_personal_data", "created", "deadline", "default_answer", "event_id", "freeze_after", "help_text", "id", "is_public", "is_visible_to_reviewers", "max_date", "max_datetime", "max_length", "max_number", "min_date", "min_datetime", "min_length", "min_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "question", "question_required", "target", "updated", "variant") VALUES (OLD."active", OLD."contains_personal_data", OLD."created", OLD."deadline", OLD."default_answer", OLD."event_id", OLD."freeze_after", OLD."help_text", OLD."id", OLD."is_public", OLD."is_visible_to_reviewers", OLD."max_date", OLD."max_datetime", OLD."max_length", OLD."max_number", OLD."min_date", OLD."min_datetime", OLD."min_length", OLD."min_number", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."position", OLD."question", OLD."question_required", OLD."target", OLD."updated", OLD."variant"); RETURN NULL;',
                    hash="0ef8d414c3210324313a966433ea9d25a4fa2c39",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_15a55",
                    table="submission_question",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="resourceproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_resourceproxyevent" ("created", "description", "id", "link", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."id", NEW."link", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."resource", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="11dff13f3bdef9c2683f98bdb3346e8ab8acefc7",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_c293a",
                    table="submission_resource",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="resourceproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_resourceproxyevent" ("created", "description", "id", "link", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "submission_id", "updated") VALUES (NEW."created", NEW."description", NEW."id", NEW."link", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."resource", NEW."submission_id", NEW."updated"); RETURN NULL;',
                    hash="63dee1e27453cb198573b7deb322a6dd11719bfa",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_50ee7",
                    table="submission_resource",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="resourceproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_resourceproxyevent" ("created", "description", "id", "link", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "resource", "submission_id", "updated") VALUES (OLD."created", OLD."description", OLD."id", OLD."link", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."resource", OLD."submission_id", OLD."updated"); RETURN NULL;',
                    hash="89ed4163e4685a7b1b6c4a5bd607b81ef28f1644",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_18ef1",
                    table="submission_resource",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewphaseproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewphaseproxyevent" ("can_change_submission_state", "can_review", "can_see_other_reviews", "can_see_reviewer_names", "can_see_speaker_names", "can_tag_submissions", "created", "end", "event_id", "id", "is_active", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "proposal_visibility", "speakers_can_change_submissions", "start", "updated") VALUES (NEW."can_change_submission_state", NEW."can_review", NEW."can_see_other_reviews", NEW."can_see_reviewer_names", NEW."can_see_speaker_names", NEW."can_tag_submissions", NEW."created", NEW."end", NEW."event_id", NEW."id", NEW."is_active", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."proposal_visibility", NEW."speakers_can_change_submissions", NEW."start", NEW."updated"); RETURN NULL;',
                    hash="3d777df3984b8d598aa52e3c721ae1917ae28441",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_d4331",
                    table="submission_reviewphase",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewphaseproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewphaseproxyevent" ("can_change_submission_state", "can_review", "can_see_other_reviews", "can_see_reviewer_names", "can_see_speaker_names", "can_tag_submissions", "created", "end", "event_id", "id", "is_active", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "proposal_visibility", "speakers_can_change_submissions", "start", "updated") VALUES (NEW."can_change_submission_state", NEW."can_review", NEW."can_see_other_reviews", NEW."can_see_reviewer_names", NEW."can_see_speaker_names", NEW."can_tag_submissions", NEW."created", NEW."end", NEW."event_id", NEW."id", NEW."is_active", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."proposal_visibility", NEW."speakers_can_change_submissions", NEW."start", NEW."updated"); RETURN NULL;',
                    hash="963808caecf82138568fd0248618101328cb920b",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_9b53d",
                    table="submission_reviewphase",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewphaseproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewphaseproxyevent" ("can_change_submission_state", "can_review", "can_see_other_reviews", "can_see_reviewer_names", "can_see_speaker_names", "can_tag_submissions", "created", "end", "event_id", "id", "is_active", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "proposal_visibility", "speakers_can_change_submissions", "start", "updated") VALUES (OLD."can_change_submission_state", OLD."can_review", OLD."can_see_other_reviews", OLD."can_see_reviewer_names", OLD."can_see_speaker_names", OLD."can_tag_submissions", OLD."created", OLD."end", OLD."event_id", OLD."id", OLD."is_active", OLD."name", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."position", OLD."proposal_visibility", OLD."speakers_can_change_submissions", OLD."start", OLD."updated"); RETURN NULL;',
                    hash="b346999b1a6b298d0424a07bcbd17f31db5ddd3a",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_5eef4",
                    table="submission_reviewphase",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscorecategoryproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscorecategoryproxyevent" ("active", "created", "event_id", "id", "is_independent", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "required", "updated", "weight") VALUES (NEW."active", NEW."created", NEW."event_id", NEW."id", NEW."is_independent", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."required", NEW."updated", NEW."weight"); RETURN NULL;',
                    hash="c2ed230f716c94a1f29cc01e0ccfa9d8eb4cd219",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_1481a",
                    table="submission_reviewscorecategory",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscorecategoryproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewscorecategoryproxyevent" ("active", "created", "event_id", "id", "is_independent", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "required", "updated", "weight") VALUES (NEW."active", NEW."created", NEW."event_id", NEW."id", NEW."is_independent", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."required", NEW."updated", NEW."weight"); RETURN NULL;',
                    hash="e20ac5514d27f4840b4aa1eae07c40810a6be537",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_59928",
                    table="submission_reviewscorecategory",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscorecategoryproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscorecategoryproxyevent" ("active", "created", "event_id", "id", "is_independent", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "required", "updated", "weight") VALUES (OLD."active", OLD."created", OLD."event_id", OLD."id", OLD."is_independent", OLD."name", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."required", OLD."updated", OLD."weight"); RETURN NULL;',
                    hash="d46d36756402da2ea2e2f0bba73703d78218796a",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_dda00",
                    table="submission_reviewscorecategory",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscoreproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscoreproxyevent" ("category_id", "created", "id", "label", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "value") VALUES (NEW."category_id", NEW."created", NEW."id", NEW."label", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."updated", NEW."value"); RETURN NULL;',
                    hash="cc1b7a720fd84912f0c672402bf207d2ef15f2f1",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_207cb",
                    table="submission_reviewscore",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscoreproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_reviewscoreproxyevent" ("category_id", "created", "id", "label", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "value") VALUES (NEW."category_id", NEW."created", NEW."id", NEW."label", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."updated", NEW."value"); RETURN NULL;',
                    hash="adc82b72ac6f089cdb84a418760a0807f07cc5af",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_f8858",
                    table="submission_reviewscore",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reviewscoreproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_reviewscoreproxyevent" ("category_id", "created", "id", "label", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated", "value") VALUES (OLD."category_id", OLD."created", OLD."id", OLD."label", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."updated", OLD."value"); RETURN NULL;',
                    hash="f488151ad5d4960accbd82b20bd8ead24375121b",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_9911d",
                    table="submission_reviewscore",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissiontypeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissiontypeproxyevent" ("created", "deadline", "default_duration", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "requires_access_code", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_duration", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."requires_access_code", NEW."updated"); RETURN NULL;',
                    hash="af8a6722359677f34931fa59892088fdcfbc2dfd",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_46576",
                    table="submission_submissiontype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissiontypeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_submissiontypeproxyevent" ("created", "deadline", "default_duration", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "requires_access_code", "updated") VALUES (NEW."created", NEW."deadline", NEW."default_duration", NEW."event_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."requires_access_code", NEW."updated"); RETURN NULL;',
                    hash="125b1a1765478f6b4af4a00258019064865aee7e",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_839bc",
                    table="submission_submissiontype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submissiontypeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submissiontypeproxyevent" ("created", "deadline", "default_duration", "event_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "requires_access_code", "updated") VALUES (OLD."created", OLD."deadline", OLD."default_duration", OLD."event_id", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."requires_access_code", OLD."updated"); RETURN NULL;',
                    hash="c3a680e5f94122a000d1487b86dc6dc8432f25f9",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_1ae4b",
                    table="submission_submissiontype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submitteraccesscodeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submitteraccesscodeproxyevent" ("code", "created", "event_id", "id", "maximum_uses", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redeemed", "submission_type_id", "track_id", "updated", "valid_until") VALUES (NEW."code", NEW."created", NEW."event_id", NEW."id", NEW."maximum_uses", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redeemed", NEW."submission_type_id", NEW."track_id", NEW."updated", NEW."valid_until"); RETURN NULL;',
                    hash="fbc2960a32479887cff818a9b90ea326cffa0bff",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_82901",
                    table="submission_submitteraccesscode",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submitteraccesscodeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_submitteraccesscodeproxyevent" ("code", "created", "event_id", "id", "maximum_uses", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redeemed", "submission_type_id", "track_id", "updated", "valid_until") VALUES (NEW."code", NEW."created", NEW."event_id", NEW."id", NEW."maximum_uses", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redeemed", NEW."submission_type_id", NEW."track_id", NEW."updated", NEW."valid_until"); RETURN NULL;',
                    hash="e1b1fdd300afae01fb9e4a6c1603fdf834e49d1d",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_75df9",
                    table="submission_submitteraccesscode",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="submitteraccesscodeproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_submitteraccesscodeproxyevent" ("code", "created", "event_id", "id", "maximum_uses", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redeemed", "submission_type_id", "track_id", "updated", "valid_until") VALUES (OLD."code", OLD."created", OLD."event_id", OLD."id", OLD."maximum_uses", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."redeemed", OLD."submission_type_id", OLD."track_id", OLD."updated", OLD."valid_until"); RETURN NULL;',
                    hash="738d0acaa9f20c4b705609e290cdb2036afbc157",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_f1a8d",
                    table="submission_submitteraccesscode",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tagproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_tagproxyevent" ("color", "created", "description", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "public", "tag", "updated") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."public", NEW."tag", NEW."updated"); RETURN NULL;',
                    hash="854c7292eb36b837aed5f03b8d4cd4951bdce440",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_a5ee5",
                    table="submission_tag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tagproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "pretalx_auditlog_tagproxyevent" ("color", "created", "description", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "public", "tag", "updated") VALUES (NEW."color", NEW."created", NEW."description", NEW."event_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."public", NEW."tag", NEW."updated"); RETURN NULL;',
                    hash="f39276adaad9856ee7439e36d3ab4a7db8bdf407",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_1a794",
                    table="submission_tag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tagproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_tagproxyevent" ("color", "created", "description", "event_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "public", "tag", "updated") VALUES (OLD."color", OLD."created", OLD."description", OLD."event_id", OLD."id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."public", OLD."tag", OLD."updated"); RETURN NULL;',
                    hash="bdba257f096bb0283edb015862d83231a6157d29",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_e5beb",
                    table="submission_tag",
                    when="AFTER",
                ),
            ),
        ),
    ]
