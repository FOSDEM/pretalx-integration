# Generated by Django 4.2.5 on 2023-12-02 21:04

from django.db import migrations
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    dependencies = [
        ("pretalx_auditlog", "0006_remove_reviewproxy_snapshot_insert_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="answerproxy",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answerproxy",
            name="snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="answerproxy",
            name="beforedelete",
        ),
        migrations.RemoveField(
            model_name="answerproxyevent",
            name="updated",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id") VALUES (NEW."answer", NEW."answer_file", NEW."created", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."question_id", NEW."review_id", NEW."submission_id"); RETURN NULL;',
                    hash="1f3d7720248a046c9cf9459994e1fbdade3e1027",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_34895",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."created" IS DISTINCT FROM (NEW."created") OR OLD."question_id" IS DISTINCT FROM (NEW."question_id") OR OLD."submission_id" IS DISTINCT FROM (NEW."submission_id") OR OLD."person_id" IS DISTINCT FROM (NEW."person_id") OR OLD."review_id" IS DISTINCT FROM (NEW."review_id") OR OLD."answer" IS DISTINCT FROM (NEW."answer") OR OLD."answer_file" IS DISTINCT FROM (NEW."answer_file"))',
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id") VALUES (NEW."answer", NEW."answer_file", NEW."created", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."question_id", NEW."review_id", NEW."submission_id"); RETURN NULL;',
                    hash="122604adf35f2b528742a20d6f9ec76ae539baf8",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_d1e96",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="answerproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="beforedelete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "pretalx_auditlog_answerproxyevent" ("answer", "answer_file", "created", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "question_id", "review_id", "submission_id") VALUES (OLD."answer", OLD."answer_file", OLD."created", OLD."id", OLD."person_id", _pgh_attach_context(), NOW(), \'beforedelete\', OLD."id", OLD."question_id", OLD."review_id", OLD."submission_id"); RETURN NULL;',
                    hash="2704bfbe536155fc59dd8f49dfaedcec8284f5d4",
                    operation="DELETE",
                    pgid="pgtrigger_beforedelete_07b3f",
                    table="submission_answer",
                    when="AFTER",
                ),
            ),
        ),
    ]
